// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: myprotocol.proto

#include "myprotocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace GoBang {
PROTOBUF_CONSTEXPR LoginRequest::LoginRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.passwd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoginRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginRequestDefaultTypeInternal() {}
  union {
    LoginRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
PROTOBUF_CONSTEXPR LoginResponse::LoginResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.points_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoginResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginResponseDefaultTypeInternal() {}
  union {
    LoginResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
PROTOBUF_CONSTEXPR RegisterRequest::RegisterRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.passwd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterRequestDefaultTypeInternal() {}
  union {
    RegisterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
PROTOBUF_CONSTEXPR RegisterResponse::RegisterResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterResponseDefaultTypeInternal() {}
  union {
    RegisterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterResponseDefaultTypeInternal _RegisterResponse_default_instance_;
PROTOBUF_CONSTEXPR RankListRequest::RankListRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_)*/0
  , /*decltype(_impl_.cnt_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RankListRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RankListRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RankListRequestDefaultTypeInternal() {}
  union {
    RankListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RankListRequestDefaultTypeInternal _RankListRequest_default_instance_;
PROTOBUF_CONSTEXPR Player::Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.points_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDefaultTypeInternal() {}
  union {
    Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDefaultTypeInternal _Player_default_instance_;
PROTOBUF_CONSTEXPR RankListResponse::RankListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_)*/{}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RankListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RankListResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RankListResponseDefaultTypeInternal() {}
  union {
    RankListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RankListResponseDefaultTypeInternal _RankListResponse_default_instance_;
PROTOBUF_CONSTEXPR NormalMatchRequest::NormalMatchRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NormalMatchRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NormalMatchRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NormalMatchRequestDefaultTypeInternal() {}
  union {
    NormalMatchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NormalMatchRequestDefaultTypeInternal _NormalMatchRequest_default_instance_;
PROTOBUF_CONSTEXPR NormalMatchResponse::NormalMatchResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NormalMatchResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NormalMatchResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NormalMatchResponseDefaultTypeInternal() {}
  union {
    NormalMatchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NormalMatchResponseDefaultTypeInternal _NormalMatchResponse_default_instance_;
PROTOBUF_CONSTEXPR RankMatchRequest::RankMatchRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RankMatchRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RankMatchRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RankMatchRequestDefaultTypeInternal() {}
  union {
    RankMatchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RankMatchRequestDefaultTypeInternal _RankMatchRequest_default_instance_;
PROTOBUF_CONSTEXPR RankMatchResponse::RankMatchResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RankMatchResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RankMatchResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RankMatchResponseDefaultTypeInternal() {}
  union {
    RankMatchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RankMatchResponseDefaultTypeInternal _RankMatchResponse_default_instance_;
PROTOBUF_CONSTEXPR CreateRoomRequest::CreateRoomRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateRoomRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateRoomRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateRoomRequestDefaultTypeInternal() {}
  union {
    CreateRoomRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateRoomRequestDefaultTypeInternal _CreateRoomRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateRoomResponse::CreateRoomResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateRoomResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateRoomResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateRoomResponseDefaultTypeInternal() {}
  union {
    CreateRoomResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateRoomResponseDefaultTypeInternal _CreateRoomResponse_default_instance_;
PROTOBUF_CONSTEXPR JoinRoomRequest::JoinRoomRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JoinRoomRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JoinRoomRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JoinRoomRequestDefaultTypeInternal() {}
  union {
    JoinRoomRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JoinRoomRequestDefaultTypeInternal _JoinRoomRequest_default_instance_;
PROTOBUF_CONSTEXPR JoinRoomResponse::JoinRoomResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JoinRoomResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JoinRoomResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JoinRoomResponseDefaultTypeInternal() {}
  union {
    JoinRoomResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JoinRoomResponseDefaultTypeInternal _JoinRoomResponse_default_instance_;
PROTOBUF_CONSTEXPR Piece::Piece(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.color_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PieceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PieceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PieceDefaultTypeInternal() {}
  union {
    Piece _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PieceDefaultTypeInternal _Piece_default_instance_;
PROTOBUF_CONSTEXPR Border::Border(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.row_2_)*/int64_t{0}
  , /*decltype(_impl_.row_4_)*/int64_t{0}
  , /*decltype(_impl_.row_6_)*/int64_t{0}
  , /*decltype(_impl_.row_8_)*/int64_t{0}
  , /*decltype(_impl_.row_10_)*/int64_t{0}
  , /*decltype(_impl_.row_12_)*/int64_t{0}
  , /*decltype(_impl_.row_14_)*/int64_t{0}
  , /*decltype(_impl_.row_16_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BorderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BorderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BorderDefaultTypeInternal() {}
  union {
    Border _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BorderDefaultTypeInternal _Border_default_instance_;
PROTOBUF_CONSTEXPR SetPieceRequest::SetPieceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.p_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetPieceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetPieceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetPieceRequestDefaultTypeInternal() {}
  union {
    SetPieceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetPieceRequestDefaultTypeInternal _SetPieceRequest_default_instance_;
PROTOBUF_CONSTEXPR SetPieceResponse::SetPieceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.b_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.next_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetPieceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetPieceResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetPieceResponseDefaultTypeInternal() {}
  union {
    SetPieceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetPieceResponseDefaultTypeInternal _SetPieceResponse_default_instance_;
PROTOBUF_CONSTEXPR UndoRequest::UndoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UndoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UndoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UndoRequestDefaultTypeInternal() {}
  union {
    UndoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UndoRequestDefaultTypeInternal _UndoRequest_default_instance_;
PROTOBUF_CONSTEXPR UndoResponse::UndoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UndoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UndoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UndoResponseDefaultTypeInternal() {}
  union {
    UndoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UndoResponseDefaultTypeInternal _UndoResponse_default_instance_;
PROTOBUF_CONSTEXPR TieRequest::TieRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TieRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TieRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TieRequestDefaultTypeInternal() {}
  union {
    TieRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TieRequestDefaultTypeInternal _TieRequest_default_instance_;
PROTOBUF_CONSTEXPR TieResponse::TieResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TieResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TieResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TieResponseDefaultTypeInternal() {}
  union {
    TieResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TieResponseDefaultTypeInternal _TieResponse_default_instance_;
PROTOBUF_CONSTEXPR SurrenderRequest::SurrenderRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SurrenderRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SurrenderRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SurrenderRequestDefaultTypeInternal() {}
  union {
    SurrenderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SurrenderRequestDefaultTypeInternal _SurrenderRequest_default_instance_;
PROTOBUF_CONSTEXPR Messg::Messg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessgDefaultTypeInternal() {}
  union {
    Messg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessgDefaultTypeInternal _Messg_default_instance_;
PROTOBUF_CONSTEXPR ContinueGameRequest::ContinueGameRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContinueGameRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContinueGameRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContinueGameRequestDefaultTypeInternal() {}
  union {
    ContinueGameRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContinueGameRequestDefaultTypeInternal _ContinueGameRequest_default_instance_;
PROTOBUF_CONSTEXPR ContinueGameResponse::ContinueGameResponse(
    ::_pbi::ConstantInitialized) {}
struct ContinueGameResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContinueGameResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContinueGameResponseDefaultTypeInternal() {}
  union {
    ContinueGameResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContinueGameResponseDefaultTypeInternal _ContinueGameResponse_default_instance_;
PROTOBUF_CONSTEXPR QuitRoomRequest::QuitRoomRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuitRoomRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuitRoomRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuitRoomRequestDefaultTypeInternal() {}
  union {
    QuitRoomRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuitRoomRequestDefaultTypeInternal _QuitRoomRequest_default_instance_;
PROTOBUF_CONSTEXPR QuitRoomResponse::QuitRoomResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuitRoomResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuitRoomResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuitRoomResponseDefaultTypeInternal() {}
  union {
    QuitRoomResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuitRoomResponseDefaultTypeInternal _QuitRoomResponse_default_instance_;
PROTOBUF_CONSTEXPR GameStart::GameStart(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.competitorname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.competitorid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mycolor_)*/0
  , /*decltype(_impl_.competitorcolor_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GameStartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameStartDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameStartDefaultTypeInternal() {}
  union {
    GameStart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameStartDefaultTypeInternal _GameStart_default_instance_;
PROTOBUF_CONSTEXPR GameOver::GameOver(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.winuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.iswin_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GameOverDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameOverDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameOverDefaultTypeInternal() {}
  union {
    GameOver _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameOverDefaultTypeInternal _GameOver_default_instance_;
PROTOBUF_CONSTEXPR goBangRequest::goBangRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.request_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct goBangRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR goBangRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~goBangRequestDefaultTypeInternal() {}
  union {
    goBangRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 goBangRequestDefaultTypeInternal _goBangRequest_default_instance_;
PROTOBUF_CONSTEXPR goBangResponse::goBangResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.response_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct goBangResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR goBangResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~goBangResponseDefaultTypeInternal() {}
  union {
    goBangResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 goBangResponseDefaultTypeInternal _goBangResponse_default_instance_;
}  // namespace GoBang
static ::_pb::Metadata file_level_metadata_myprotocol_2eproto[33];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_myprotocol_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_myprotocol_2eproto = nullptr;

const uint32_t TableStruct_myprotocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::LoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::LoginRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::GoBang::LoginRequest, _impl_.passwd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::LoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::LoginResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::GoBang::LoginResponse, _impl_.msg_),
  PROTOBUF_FIELD_OFFSET(::GoBang::LoginResponse, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::GoBang::LoginResponse, _impl_.points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::RegisterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::RegisterRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::GoBang::RegisterRequest, _impl_.passwd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::RegisterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::RegisterResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::GoBang::RegisterResponse, _impl_.msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::RankListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::RankListRequest, _impl_.start_),
  PROTOBUF_FIELD_OFFSET(::GoBang::RankListRequest, _impl_.cnt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::Player, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::GoBang::Player, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::GoBang::Player, _impl_.points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::RankListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::RankListResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::GoBang::RankListResponse, _impl_.msg_),
  PROTOBUF_FIELD_OFFSET(::GoBang::RankListResponse, _impl_.list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::NormalMatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::NormalMatchRequest, _impl_.uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::NormalMatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::NormalMatchResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::GoBang::NormalMatchResponse, _impl_.msg_),
  PROTOBUF_FIELD_OFFSET(::GoBang::NormalMatchResponse, _impl_.rid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::RankMatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::RankMatchRequest, _impl_.uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::RankMatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::RankMatchResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::GoBang::RankMatchResponse, _impl_.msg_),
  PROTOBUF_FIELD_OFFSET(::GoBang::RankMatchResponse, _impl_.rid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::CreateRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::CreateRoomRequest, _impl_.uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::CreateRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::CreateRoomResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::GoBang::CreateRoomResponse, _impl_.msg_),
  PROTOBUF_FIELD_OFFSET(::GoBang::CreateRoomResponse, _impl_.rid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::JoinRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::JoinRoomRequest, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::GoBang::JoinRoomRequest, _impl_.rid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::JoinRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::JoinRoomResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::GoBang::JoinRoomResponse, _impl_.msg_),
  PROTOBUF_FIELD_OFFSET(::GoBang::JoinRoomResponse, _impl_.rid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::Piece, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::Piece, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::GoBang::Piece, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::GoBang::Piece, _impl_.color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::Border, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::Border, _impl_.row_2_),
  PROTOBUF_FIELD_OFFSET(::GoBang::Border, _impl_.row_4_),
  PROTOBUF_FIELD_OFFSET(::GoBang::Border, _impl_.row_6_),
  PROTOBUF_FIELD_OFFSET(::GoBang::Border, _impl_.row_8_),
  PROTOBUF_FIELD_OFFSET(::GoBang::Border, _impl_.row_10_),
  PROTOBUF_FIELD_OFFSET(::GoBang::Border, _impl_.row_12_),
  PROTOBUF_FIELD_OFFSET(::GoBang::Border, _impl_.row_14_),
  PROTOBUF_FIELD_OFFSET(::GoBang::Border, _impl_.row_16_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::SetPieceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::SetPieceRequest, _impl_.p_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::SetPieceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::SetPieceResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::GoBang::SetPieceResponse, _impl_.next_),
  PROTOBUF_FIELD_OFFSET(::GoBang::SetPieceResponse, _impl_.msg_),
  PROTOBUF_FIELD_OFFSET(::GoBang::SetPieceResponse, _impl_.b_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::UndoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::UndoRequest, _impl_.uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::UndoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::UndoResponse, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::TieRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::TieRequest, _impl_.uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::TieResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::TieResponse, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::SurrenderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::SurrenderRequest, _impl_.uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::Messg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::Messg, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::GoBang::Messg, _impl_.msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::ContinueGameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::ContinueGameRequest, _impl_.uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::ContinueGameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::QuitRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::QuitRoomRequest, _impl_.uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::QuitRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::QuitRoomResponse, _impl_.uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::GameStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::GameStart, _impl_.mycolor_),
  PROTOBUF_FIELD_OFFSET(::GoBang::GameStart, _impl_.competitorcolor_),
  PROTOBUF_FIELD_OFFSET(::GoBang::GameStart, _impl_.competitorname_),
  PROTOBUF_FIELD_OFFSET(::GoBang::GameStart, _impl_.competitorid_),
  PROTOBUF_FIELD_OFFSET(::GoBang::GameStart, _impl_.rid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::GameOver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::GameOver, _impl_.iswin_),
  PROTOBUF_FIELD_OFFSET(::GoBang::GameOver, _impl_.winuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::goBangRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::GoBang::goBangRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::goBangRequest, _impl_.type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::GoBang::goBangRequest, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GoBang::goBangResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::GoBang::goBangResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GoBang::goBangResponse, _impl_.type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::GoBang::goBangResponse, _impl_.response_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::GoBang::LoginRequest)},
  { 8, -1, -1, sizeof(::GoBang::LoginResponse)},
  { 18, -1, -1, sizeof(::GoBang::RegisterRequest)},
  { 26, -1, -1, sizeof(::GoBang::RegisterResponse)},
  { 34, -1, -1, sizeof(::GoBang::RankListRequest)},
  { 42, -1, -1, sizeof(::GoBang::Player)},
  { 51, -1, -1, sizeof(::GoBang::RankListResponse)},
  { 60, -1, -1, sizeof(::GoBang::NormalMatchRequest)},
  { 67, -1, -1, sizeof(::GoBang::NormalMatchResponse)},
  { 76, -1, -1, sizeof(::GoBang::RankMatchRequest)},
  { 83, -1, -1, sizeof(::GoBang::RankMatchResponse)},
  { 92, -1, -1, sizeof(::GoBang::CreateRoomRequest)},
  { 99, -1, -1, sizeof(::GoBang::CreateRoomResponse)},
  { 108, -1, -1, sizeof(::GoBang::JoinRoomRequest)},
  { 116, -1, -1, sizeof(::GoBang::JoinRoomResponse)},
  { 125, -1, -1, sizeof(::GoBang::Piece)},
  { 134, -1, -1, sizeof(::GoBang::Border)},
  { 148, -1, -1, sizeof(::GoBang::SetPieceRequest)},
  { 155, -1, -1, sizeof(::GoBang::SetPieceResponse)},
  { 165, -1, -1, sizeof(::GoBang::UndoRequest)},
  { 172, -1, -1, sizeof(::GoBang::UndoResponse)},
  { 179, -1, -1, sizeof(::GoBang::TieRequest)},
  { 186, -1, -1, sizeof(::GoBang::TieResponse)},
  { 193, -1, -1, sizeof(::GoBang::SurrenderRequest)},
  { 200, -1, -1, sizeof(::GoBang::Messg)},
  { 208, -1, -1, sizeof(::GoBang::ContinueGameRequest)},
  { 215, -1, -1, sizeof(::GoBang::ContinueGameResponse)},
  { 221, -1, -1, sizeof(::GoBang::QuitRoomRequest)},
  { 228, -1, -1, sizeof(::GoBang::QuitRoomResponse)},
  { 235, -1, -1, sizeof(::GoBang::GameStart)},
  { 246, -1, -1, sizeof(::GoBang::GameOver)},
  { 254, -1, -1, sizeof(::GoBang::goBangRequest)},
  { 277, -1, -1, sizeof(::GoBang::goBangResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::GoBang::_LoginRequest_default_instance_._instance,
  &::GoBang::_LoginResponse_default_instance_._instance,
  &::GoBang::_RegisterRequest_default_instance_._instance,
  &::GoBang::_RegisterResponse_default_instance_._instance,
  &::GoBang::_RankListRequest_default_instance_._instance,
  &::GoBang::_Player_default_instance_._instance,
  &::GoBang::_RankListResponse_default_instance_._instance,
  &::GoBang::_NormalMatchRequest_default_instance_._instance,
  &::GoBang::_NormalMatchResponse_default_instance_._instance,
  &::GoBang::_RankMatchRequest_default_instance_._instance,
  &::GoBang::_RankMatchResponse_default_instance_._instance,
  &::GoBang::_CreateRoomRequest_default_instance_._instance,
  &::GoBang::_CreateRoomResponse_default_instance_._instance,
  &::GoBang::_JoinRoomRequest_default_instance_._instance,
  &::GoBang::_JoinRoomResponse_default_instance_._instance,
  &::GoBang::_Piece_default_instance_._instance,
  &::GoBang::_Border_default_instance_._instance,
  &::GoBang::_SetPieceRequest_default_instance_._instance,
  &::GoBang::_SetPieceResponse_default_instance_._instance,
  &::GoBang::_UndoRequest_default_instance_._instance,
  &::GoBang::_UndoResponse_default_instance_._instance,
  &::GoBang::_TieRequest_default_instance_._instance,
  &::GoBang::_TieResponse_default_instance_._instance,
  &::GoBang::_SurrenderRequest_default_instance_._instance,
  &::GoBang::_Messg_default_instance_._instance,
  &::GoBang::_ContinueGameRequest_default_instance_._instance,
  &::GoBang::_ContinueGameResponse_default_instance_._instance,
  &::GoBang::_QuitRoomRequest_default_instance_._instance,
  &::GoBang::_QuitRoomResponse_default_instance_._instance,
  &::GoBang::_GameStart_default_instance_._instance,
  &::GoBang::_GameOver_default_instance_._instance,
  &::GoBang::_goBangRequest_default_instance_._instance,
  &::GoBang::_goBangResponse_default_instance_._instance,
};

const char descriptor_table_protodef_myprotocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020myprotocol.proto\022\006GoBang\",\n\014LoginReque"
  "st\022\014\n\004name\030\001 \001(\t\022\016\n\006passwd\030\002 \001(\t\"J\n\rLogi"
  "nResponse\022\017\n\007success\030\001 \001(\010\022\013\n\003msg\030\002 \001(\t\022"
  "\013\n\003uid\030\003 \001(\t\022\016\n\006points\030\004 \001(\005\"/\n\017Register"
  "Request\022\014\n\004name\030\001 \001(\t\022\016\n\006passwd\030\002 \001(\t\"0\n"
  "\020RegisterResponse\022\017\n\007success\030\001 \001(\010\022\013\n\003ms"
  "g\030\002 \001(\t\"-\n\017RankListRequest\022\r\n\005start\030\001 \001("
  "\005\022\013\n\003cnt\030\002 \001(\005\"3\n\006Player\022\013\n\003uid\030\001 \001(\t\022\014\n"
  "\004name\030\002 \001(\t\022\016\n\006points\030\003 \001(\005\"N\n\020RankListR"
  "esponse\022\017\n\007success\030\001 \001(\010\022\013\n\003msg\030\002 \001(\t\022\034\n"
  "\004list\030\003 \003(\0132\016.GoBang.Player\"!\n\022NormalMat"
  "chRequest\022\013\n\003uid\030\001 \001(\t\"@\n\023NormalMatchRes"
  "ponse\022\017\n\007success\030\001 \001(\010\022\013\n\003msg\030\002 \001(\t\022\013\n\003r"
  "id\030\003 \001(\t\"\037\n\020RankMatchRequest\022\013\n\003uid\030\001 \001("
  "\t\">\n\021RankMatchResponse\022\017\n\007success\030\001 \001(\010\022"
  "\013\n\003msg\030\002 \001(\t\022\013\n\003rid\030\003 \001(\t\" \n\021CreateRoomR"
  "equest\022\013\n\003uid\030\001 \001(\t\"\?\n\022CreateRoomRespons"
  "e\022\017\n\007success\030\001 \001(\010\022\013\n\003msg\030\002 \001(\t\022\013\n\003rid\030\003"
  " \001(\t\"+\n\017JoinRoomRequest\022\013\n\003uid\030\001 \001(\t\022\013\n\003"
  "rid\030\002 \001(\t\"=\n\020JoinRoomResponse\022\017\n\007success"
  "\030\001 \001(\010\022\013\n\003msg\030\002 \001(\t\022\013\n\003rid\030\003 \001(\t\"@\n\005Piec"
  "e\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022!\n\005color\030\003 \001(\0162\022"
  ".GoBang.PieceColor\"\204\001\n\006Border\022\r\n\005row_2\030\001"
  " \001(\020\022\r\n\005row_4\030\002 \001(\020\022\r\n\005row_6\030\003 \001(\020\022\r\n\005ro"
  "w_8\030\004 \001(\020\022\016\n\006row_10\030\005 \001(\020\022\016\n\006row_12\030\006 \001("
  "\020\022\016\n\006row_14\030\007 \001(\020\022\016\n\006row_16\030\010 \001(\020\"+\n\017Set"
  "PieceRequest\022\030\n\001p\030\001 \001(\0132\r.GoBang.Piece\"m"
  "\n\020SetPieceResponse\022\017\n\007success\030\001 \001(\010\022 \n\004n"
  "ext\030\004 \001(\0162\022.GoBang.PieceColor\022\013\n\003msg\030\002 \001"
  "(\t\022\031\n\001b\030\003 \001(\0132\016.GoBang.Border\"\032\n\013UndoReq"
  "uest\022\013\n\003uid\030\001 \001(\t\"\037\n\014UndoResponse\022\017\n\007suc"
  "cess\030\001 \001(\010\"\031\n\nTieRequest\022\013\n\003uid\030\001 \001(\t\"\036\n"
  "\013TieResponse\022\017\n\007success\030\001 \001(\010\"\037\n\020Surrend"
  "erRequest\022\013\n\003uid\030\001 \001(\t\"\"\n\005Messg\022\014\n\004name\030"
  "\001 \001(\t\022\013\n\003msg\030\002 \001(\t\"\"\n\023ContinueGameReques"
  "t\022\013\n\003uid\030\001 \001(\t\"\026\n\024ContinueGameResponse\"\036"
  "\n\017QuitRoomRequest\022\013\n\003uid\030\001 \001(\t\"\037\n\020QuitRo"
  "omResponse\022\013\n\003uid\030\001 \001(\t\"\230\001\n\tGameStart\022#\n"
  "\007myColor\030\001 \001(\0162\022.GoBang.PieceColor\022+\n\017co"
  "mpetitorColor\030\002 \001(\0162\022.GoBang.PieceColor\022"
  "\026\n\016competitorName\030\003 \001(\t\022\024\n\014competitorID\030"
  "\004 \001(\t\022\013\n\003rid\030\005 \001(\t\")\n\010GameOver\022\r\n\005isWin\030"
  "\001 \001(\010\022\016\n\006winUid\030\002 \001(\t\"\346\005\n\rgoBangRequest\022"
  "\032\n\004type\030\001 \001(\0162\014.GoBang.TYPE\022(\n\010loginReq\030"
  "\002 \001(\0132\024.GoBang.LoginRequestH\000\022.\n\013Registe"
  "rReq\030\003 \001(\0132\027.GoBang.RegisterRequestH\000\022.\n"
  "\013rankListReq\030\004 \001(\0132\027.GoBang.RankListRequ"
  "estH\000\0222\n\rcreateRoomReq\030\005 \001(\0132\031.GoBang.Cr"
  "eateRoomRequestH\000\022.\n\013setPieceReq\030\006 \001(\0132\027"
  ".GoBang.SetPieceRequestH\000\022&\n\007undoReq\030\007 \001"
  "(\0132\023.GoBang.UndoRequestH\000\022(\n\010undoResp\030\017 "
  "\001(\0132\024.GoBang.UndoResponseH\000\022$\n\006tieReq\030\010 "
  "\001(\0132\022.GoBang.TieRequestH\000\022&\n\007tieResp\030\016 \001"
  "(\0132\023.GoBang.TieResponseH\000\0220\n\014surrenderRe"
  "q\030\t \001(\0132\030.GoBang.SurrenderRequestH\000\022\036\n\005m"
  "essg\030\n \001(\0132\r.GoBang.MessgH\000\0226\n\017continueG"
  "ameReq\030\013 \001(\0132\033.GoBang.ContinueGameReques"
  "tH\000\022.\n\013quitRoomReq\030\014 \001(\0132\027.GoBang.QuitRo"
  "omRequestH\000\0224\n\016normalMatchReq\030\r \001(\0132\032.Go"
  "Bang.NormalMatchRequestH\000\0220\n\014rankMatchRe"
  "q\030\020 \001(\0132\030.GoBang.RankMatchRequestH\000B\t\n\007r"
  "equest\"\236\006\n\016goBangResponse\022\032\n\004type\030\001 \001(\0162"
  "\014.GoBang.TYPE\022*\n\tloginResp\030\002 \001(\0132\025.GoBan"
  "g.LoginResponseH\000\0220\n\014registerResp\030\003 \001(\0132"
  "\030.GoBang.RegisterResponseH\000\0220\n\014rankListR"
  "esp\030\004 \001(\0132\030.GoBang.RankListResponseH\000\0224\n"
  "\016createRoomResp\030\005 \001(\0132\032.GoBang.CreateRoo"
  "mResponseH\000\0220\n\014setPieceResp\030\006 \001(\0132\030.GoBa"
  "ng.SetPieceResponseH\000\022,\n\014undoResponse\030\007 "
  "\001(\0132\024.GoBang.UndoResponseH\000\022&\n\007tieResp\030\010"
  " \001(\0132\023.GoBang.TieResponseH\000\022&\n\007undoReq\030\021"
  " \001(\0132\023.GoBang.UndoRequestH\000\022(\n\010undoResp\030"
  "\022 \001(\0132\024.GoBang.UndoResponseH\000\022\036\n\005messg\030\n"
  " \001(\0132\r.GoBang.MessgH\000\0228\n\020continueGameRes"
  "p\030\013 \001(\0132\034.GoBang.ContinueGameResponseH\000\022"
  "0\n\014quitRoomResp\030\014 \001(\0132\030.GoBang.QuitRoomR"
  "esponseH\000\022&\n\tgameStart\030\r \001(\0132\021.GoBang.Ga"
  "meStartH\000\022$\n\010gameOver\030\016 \001(\0132\020.GoBang.Gam"
  "eOverH\000\0226\n\017normalMatchResp\030\017 \001(\0132\033.GoBan"
  "g.NormalMatchResponseH\000\0222\n\rrankMatchResp"
  "\030\020 \001(\0132\031.GoBang.RankMatchResponseH\000B\n\n\010r"
  "esponse*\351\001\n\004TYPE\022\t\n\005LOGIN\020\000\022\014\n\010REGISTER\020"
  "\001\022\r\n\tRANK_LIST\020\002\022\020\n\014NORMAL_MATCH\020\003\022\016\n\nRA"
  "NK_MATCH\020\004\022\017\n\013CREATE_ROOM\020\005\022\r\n\tJOIN_ROOM"
  "\020\006\022\r\n\tSET_PIECE\020\007\022\010\n\004UNDO\020\010\022\007\n\003TIE\020\t\022\r\n\t"
  "SURRENDER\020\n\022\007\n\003MSG\020\013\022\021\n\rCONTINUE_GAME\020\014\022"
  "\r\n\tQUIT_ROOM\020\r\022\r\n\tGAMESTART\020\017\022\014\n\010GAMEOVE"
  "R\020\016*0\n\nPieceColor\022\014\n\010NO_PIECE\020\000\022\t\n\005BLACK"
  "\020\002\022\t\n\005WHITE\020\003b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_myprotocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_myprotocol_2eproto = {
    false, false, 3541, descriptor_table_protodef_myprotocol_2eproto,
    "myprotocol.proto",
    &descriptor_table_myprotocol_2eproto_once, nullptr, 0, 33,
    schemas, file_default_instances, TableStruct_myprotocol_2eproto::offsets,
    file_level_metadata_myprotocol_2eproto, file_level_enum_descriptors_myprotocol_2eproto,
    file_level_service_descriptors_myprotocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_myprotocol_2eproto_getter() {
  return &descriptor_table_myprotocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_myprotocol_2eproto(&descriptor_table_myprotocol_2eproto);
namespace GoBang {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_myprotocol_2eproto);
  return file_level_enum_descriptors_myprotocol_2eproto[0];
}
bool TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PieceColor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_myprotocol_2eproto);
  return file_level_enum_descriptors_myprotocol_2eproto[1];
}
bool PieceColor_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class LoginRequest::_Internal {
 public:
};

LoginRequest::LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.LoginRequest)
}
LoginRequest::LoginRequest(const LoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.passwd_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.passwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_passwd().empty()) {
    _this->_impl_.passwd_.Set(from._internal_passwd(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:GoBang.LoginRequest)
}

inline void LoginRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.passwd_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.passwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:GoBang.LoginRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.passwd_.Destroy();
}

void LoginRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.LoginRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.passwd_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.LoginRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // string passwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_passwd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.LoginRequest.passwd"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.LoginRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.LoginRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string passwd = 2;
  if (!this->_internal_passwd().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_passwd().data(), static_cast<int>(this->_internal_passwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.LoginRequest.passwd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_passwd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.LoginRequest)
  return target;
}

size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.LoginRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string passwd = 2;
  if (!this->_internal_passwd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_passwd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginRequest::GetClassData() const { return &_class_data_; }


void LoginRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginRequest*>(&to_msg);
  auto& from = static_cast<const LoginRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.LoginRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_passwd().empty()) {
    _this->_internal_set_passwd(from._internal_passwd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  return true;
}

void LoginRequest::InternalSwap(LoginRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.passwd_, lhs_arena,
      &other->_impl_.passwd_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[0]);
}

// ===================================================================

class LoginResponse::_Internal {
 public:
};

LoginResponse::LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.LoginResponse)
}
LoginResponse::LoginResponse(const LoginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.points_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.points_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.points_));
  // @@protoc_insertion_point(copy_constructor:GoBang.LoginResponse)
}

inline void LoginResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.points_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:GoBang.LoginResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
  _impl_.uid_.Destroy();
}

void LoginResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.LoginResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.points_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.points_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.LoginResponse.msg"));
        } else
          goto handle_unusual;
        continue;
      // string uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.LoginResponse.uid"));
        } else
          goto handle_unusual;
        continue;
      // int32 points = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.LoginResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.LoginResponse.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // string uid = 3;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.LoginResponse.uid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_uid(), target);
  }

  // int32 points = 4;
  if (this->_internal_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.LoginResponse)
  return target;
}

size_t LoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.LoginResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string uid = 3;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 points = 4;
  if (this->_internal_points() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_points());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginResponse::GetClassData() const { return &_class_data_; }


void LoginResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginResponse*>(&to_msg);
  auto& from = static_cast<const LoginResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.LoginResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_points() != 0) {
    _this->_internal_set_points(from._internal_points());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  return true;
}

void LoginResponse::InternalSwap(LoginResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_.points_)
      + sizeof(LoginResponse::_impl_.points_)
      - PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[1]);
}

// ===================================================================

class RegisterRequest::_Internal {
 public:
};

RegisterRequest::RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.RegisterRequest)
}
RegisterRequest::RegisterRequest(const RegisterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.passwd_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.passwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_passwd().empty()) {
    _this->_impl_.passwd_.Set(from._internal_passwd(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:GoBang.RegisterRequest)
}

inline void RegisterRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.passwd_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.passwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterRequest::~RegisterRequest() {
  // @@protoc_insertion_point(destructor:GoBang.RegisterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.passwd_.Destroy();
}

void RegisterRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.RegisterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.passwd_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.RegisterRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // string passwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_passwd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.RegisterRequest.passwd"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.RegisterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.RegisterRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string passwd = 2;
  if (!this->_internal_passwd().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_passwd().data(), static_cast<int>(this->_internal_passwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.RegisterRequest.passwd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_passwd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.RegisterRequest)
  return target;
}

size_t RegisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.RegisterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string passwd = 2;
  if (!this->_internal_passwd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_passwd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterRequest::GetClassData() const { return &_class_data_; }


void RegisterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterRequest*>(&to_msg);
  auto& from = static_cast<const RegisterRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.RegisterRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_passwd().empty()) {
    _this->_internal_set_passwd(from._internal_passwd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterRequest::CopyFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRequest::IsInitialized() const {
  return true;
}

void RegisterRequest::InternalSwap(RegisterRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.passwd_, lhs_arena,
      &other->_impl_.passwd_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[2]);
}

// ===================================================================

class RegisterResponse::_Internal {
 public:
};

RegisterResponse::RegisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.RegisterResponse)
}
RegisterResponse::RegisterResponse(const RegisterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:GoBang.RegisterResponse)
}

inline void RegisterResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterResponse::~RegisterResponse() {
  // @@protoc_insertion_point(destructor:GoBang.RegisterResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}

void RegisterResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.RegisterResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.RegisterResponse.msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.RegisterResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.RegisterResponse.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.RegisterResponse)
  return target;
}

size_t RegisterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.RegisterResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterResponse::GetClassData() const { return &_class_data_; }


void RegisterResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterResponse*>(&to_msg);
  auto& from = static_cast<const RegisterResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.RegisterResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterResponse::CopyFrom(const RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterResponse::IsInitialized() const {
  return true;
}

void RegisterResponse::InternalSwap(RegisterResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[3]);
}

// ===================================================================

class RankListRequest::_Internal {
 public:
};

RankListRequest::RankListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.RankListRequest)
}
RankListRequest::RankListRequest(const RankListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RankListRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_){}
    , decltype(_impl_.cnt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.start_, &from._impl_.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cnt_) -
    reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.cnt_));
  // @@protoc_insertion_point(copy_constructor:GoBang.RankListRequest)
}

inline void RankListRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_){0}
    , decltype(_impl_.cnt_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RankListRequest::~RankListRequest() {
  // @@protoc_insertion_point(destructor:GoBang.RankListRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RankListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RankListRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RankListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.RankListRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cnt_) -
      reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.cnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RankListRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cnt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RankListRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.RankListRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 start = 1;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_start(), target);
  }

  // int32 cnt = 2;
  if (this->_internal_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_cnt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.RankListRequest)
  return target;
}

size_t RankListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.RankListRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 start = 1;
  if (this->_internal_start() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_start());
  }

  // int32 cnt = 2;
  if (this->_internal_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cnt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RankListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RankListRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RankListRequest::GetClassData() const { return &_class_data_; }


void RankListRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RankListRequest*>(&to_msg);
  auto& from = static_cast<const RankListRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.RankListRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_start() != 0) {
    _this->_internal_set_start(from._internal_start());
  }
  if (from._internal_cnt() != 0) {
    _this->_internal_set_cnt(from._internal_cnt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RankListRequest::CopyFrom(const RankListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.RankListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankListRequest::IsInitialized() const {
  return true;
}

void RankListRequest::InternalSwap(RankListRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RankListRequest, _impl_.cnt_)
      + sizeof(RankListRequest::_impl_.cnt_)
      - PROTOBUF_FIELD_OFFSET(RankListRequest, _impl_.start_)>(
          reinterpret_cast<char*>(&_impl_.start_),
          reinterpret_cast<char*>(&other->_impl_.start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RankListRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[4]);
}

// ===================================================================

class Player::_Internal {
 public:
};

Player::Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.Player)
}
Player::Player(const Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.points_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.points_ = from._impl_.points_;
  // @@protoc_insertion_point(copy_constructor:GoBang.Player)
}

inline void Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.points_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:GoBang.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_.Destroy();
  _impl_.name_.Destroy();
}

void Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.points_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.Player.uid"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.Player.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.Player.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.Player.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 points = 3;
  if (this->_internal_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.Player)
  return target;
}

size_t Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 points = 3;
  if (this->_internal_points() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_points());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Player::GetClassData() const { return &_class_data_; }


void Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Player*>(&to_msg);
  auto& from = static_cast<const Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_points() != 0) {
    _this->_internal_set_points(from._internal_points());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  return true;
}

void Player::InternalSwap(Player* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.points_, other->_impl_.points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[5]);
}

// ===================================================================

class RankListResponse::_Internal {
 public:
};

RankListResponse::RankListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.RankListResponse)
}
RankListResponse::RankListResponse(const RankListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RankListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){from._impl_.list_}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:GoBang.RankListResponse)
}

inline void RankListResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){arena}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RankListResponse::~RankListResponse() {
  // @@protoc_insertion_point(destructor:GoBang.RankListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RankListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_.~RepeatedPtrField();
  _impl_.msg_.Destroy();
}

void RankListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RankListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.RankListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_.Clear();
  _impl_.msg_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RankListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.RankListResponse.msg"));
        } else
          goto handle_unusual;
        continue;
      // repeated .GoBang.Player list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RankListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.RankListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.RankListResponse.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // repeated .GoBang.Player list = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.RankListResponse)
  return target;
}

size_t RankListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.RankListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GoBang.Player list = 3;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->_impl_.list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RankListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RankListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RankListResponse::GetClassData() const { return &_class_data_; }


void RankListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RankListResponse*>(&to_msg);
  auto& from = static_cast<const RankListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.RankListResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.list_.MergeFrom(from._impl_.list_);
  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RankListResponse::CopyFrom(const RankListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.RankListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankListResponse::IsInitialized() const {
  return true;
}

void RankListResponse::InternalSwap(RankListResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.list_.InternalSwap(&other->_impl_.list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[6]);
}

// ===================================================================

class NormalMatchRequest::_Internal {
 public:
};

NormalMatchRequest::NormalMatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.NormalMatchRequest)
}
NormalMatchRequest::NormalMatchRequest(const NormalMatchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NormalMatchRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:GoBang.NormalMatchRequest)
}

inline void NormalMatchRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NormalMatchRequest::~NormalMatchRequest() {
  // @@protoc_insertion_point(destructor:GoBang.NormalMatchRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NormalMatchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_.Destroy();
}

void NormalMatchRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NormalMatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.NormalMatchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NormalMatchRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.NormalMatchRequest.uid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NormalMatchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.NormalMatchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.NormalMatchRequest.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.NormalMatchRequest)
  return target;
}

size_t NormalMatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.NormalMatchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NormalMatchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NormalMatchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NormalMatchRequest::GetClassData() const { return &_class_data_; }


void NormalMatchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NormalMatchRequest*>(&to_msg);
  auto& from = static_cast<const NormalMatchRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.NormalMatchRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NormalMatchRequest::CopyFrom(const NormalMatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.NormalMatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalMatchRequest::IsInitialized() const {
  return true;
}

void NormalMatchRequest::InternalSwap(NormalMatchRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NormalMatchRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[7]);
}

// ===================================================================

class NormalMatchResponse::_Internal {
 public:
};

NormalMatchResponse::NormalMatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.NormalMatchResponse)
}
NormalMatchResponse::NormalMatchResponse(const NormalMatchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NormalMatchResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.rid_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rid().empty()) {
    _this->_impl_.rid_.Set(from._internal_rid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:GoBang.NormalMatchResponse)
}

inline void NormalMatchResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.rid_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NormalMatchResponse::~NormalMatchResponse() {
  // @@protoc_insertion_point(destructor:GoBang.NormalMatchResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NormalMatchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
  _impl_.rid_.Destroy();
}

void NormalMatchResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NormalMatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.NormalMatchResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _impl_.rid_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NormalMatchResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.NormalMatchResponse.msg"));
        } else
          goto handle_unusual;
        continue;
      // string rid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_rid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.NormalMatchResponse.rid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NormalMatchResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.NormalMatchResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.NormalMatchResponse.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // string rid = 3;
  if (!this->_internal_rid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rid().data(), static_cast<int>(this->_internal_rid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.NormalMatchResponse.rid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.NormalMatchResponse)
  return target;
}

size_t NormalMatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.NormalMatchResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string rid = 3;
  if (!this->_internal_rid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rid());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NormalMatchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NormalMatchResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NormalMatchResponse::GetClassData() const { return &_class_data_; }


void NormalMatchResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NormalMatchResponse*>(&to_msg);
  auto& from = static_cast<const NormalMatchResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.NormalMatchResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (!from._internal_rid().empty()) {
    _this->_internal_set_rid(from._internal_rid());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NormalMatchResponse::CopyFrom(const NormalMatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.NormalMatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalMatchResponse::IsInitialized() const {
  return true;
}

void NormalMatchResponse::InternalSwap(NormalMatchResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rid_, lhs_arena,
      &other->_impl_.rid_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NormalMatchResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[8]);
}

// ===================================================================

class RankMatchRequest::_Internal {
 public:
};

RankMatchRequest::RankMatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.RankMatchRequest)
}
RankMatchRequest::RankMatchRequest(const RankMatchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RankMatchRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:GoBang.RankMatchRequest)
}

inline void RankMatchRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RankMatchRequest::~RankMatchRequest() {
  // @@protoc_insertion_point(destructor:GoBang.RankMatchRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RankMatchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_.Destroy();
}

void RankMatchRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RankMatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.RankMatchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RankMatchRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.RankMatchRequest.uid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RankMatchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.RankMatchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.RankMatchRequest.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.RankMatchRequest)
  return target;
}

size_t RankMatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.RankMatchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RankMatchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RankMatchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RankMatchRequest::GetClassData() const { return &_class_data_; }


void RankMatchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RankMatchRequest*>(&to_msg);
  auto& from = static_cast<const RankMatchRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.RankMatchRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RankMatchRequest::CopyFrom(const RankMatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.RankMatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankMatchRequest::IsInitialized() const {
  return true;
}

void RankMatchRequest::InternalSwap(RankMatchRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RankMatchRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[9]);
}

// ===================================================================

class RankMatchResponse::_Internal {
 public:
};

RankMatchResponse::RankMatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.RankMatchResponse)
}
RankMatchResponse::RankMatchResponse(const RankMatchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RankMatchResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.rid_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rid().empty()) {
    _this->_impl_.rid_.Set(from._internal_rid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:GoBang.RankMatchResponse)
}

inline void RankMatchResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.rid_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RankMatchResponse::~RankMatchResponse() {
  // @@protoc_insertion_point(destructor:GoBang.RankMatchResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RankMatchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
  _impl_.rid_.Destroy();
}

void RankMatchResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RankMatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.RankMatchResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _impl_.rid_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RankMatchResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.RankMatchResponse.msg"));
        } else
          goto handle_unusual;
        continue;
      // string rid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_rid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.RankMatchResponse.rid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RankMatchResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.RankMatchResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.RankMatchResponse.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // string rid = 3;
  if (!this->_internal_rid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rid().data(), static_cast<int>(this->_internal_rid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.RankMatchResponse.rid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.RankMatchResponse)
  return target;
}

size_t RankMatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.RankMatchResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string rid = 3;
  if (!this->_internal_rid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rid());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RankMatchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RankMatchResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RankMatchResponse::GetClassData() const { return &_class_data_; }


void RankMatchResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RankMatchResponse*>(&to_msg);
  auto& from = static_cast<const RankMatchResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.RankMatchResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (!from._internal_rid().empty()) {
    _this->_internal_set_rid(from._internal_rid());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RankMatchResponse::CopyFrom(const RankMatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.RankMatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankMatchResponse::IsInitialized() const {
  return true;
}

void RankMatchResponse::InternalSwap(RankMatchResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rid_, lhs_arena,
      &other->_impl_.rid_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankMatchResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[10]);
}

// ===================================================================

class CreateRoomRequest::_Internal {
 public:
};

CreateRoomRequest::CreateRoomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.CreateRoomRequest)
}
CreateRoomRequest::CreateRoomRequest(const CreateRoomRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateRoomRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:GoBang.CreateRoomRequest)
}

inline void CreateRoomRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateRoomRequest::~CreateRoomRequest() {
  // @@protoc_insertion_point(destructor:GoBang.CreateRoomRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateRoomRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_.Destroy();
}

void CreateRoomRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.CreateRoomRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRoomRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.CreateRoomRequest.uid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateRoomRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.CreateRoomRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.CreateRoomRequest.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.CreateRoomRequest)
  return target;
}

size_t CreateRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.CreateRoomRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateRoomRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateRoomRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateRoomRequest::GetClassData() const { return &_class_data_; }


void CreateRoomRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateRoomRequest*>(&to_msg);
  auto& from = static_cast<const CreateRoomRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.CreateRoomRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateRoomRequest::CopyFrom(const CreateRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.CreateRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoomRequest::IsInitialized() const {
  return true;
}

void CreateRoomRequest::InternalSwap(CreateRoomRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRoomRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[11]);
}

// ===================================================================

class CreateRoomResponse::_Internal {
 public:
};

CreateRoomResponse::CreateRoomResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.CreateRoomResponse)
}
CreateRoomResponse::CreateRoomResponse(const CreateRoomResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateRoomResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.rid_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rid().empty()) {
    _this->_impl_.rid_.Set(from._internal_rid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:GoBang.CreateRoomResponse)
}

inline void CreateRoomResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.rid_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateRoomResponse::~CreateRoomResponse() {
  // @@protoc_insertion_point(destructor:GoBang.CreateRoomResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateRoomResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
  _impl_.rid_.Destroy();
}

void CreateRoomResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.CreateRoomResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _impl_.rid_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRoomResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.CreateRoomResponse.msg"));
        } else
          goto handle_unusual;
        continue;
      // string rid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_rid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.CreateRoomResponse.rid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateRoomResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.CreateRoomResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.CreateRoomResponse.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // string rid = 3;
  if (!this->_internal_rid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rid().data(), static_cast<int>(this->_internal_rid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.CreateRoomResponse.rid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.CreateRoomResponse)
  return target;
}

size_t CreateRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.CreateRoomResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string rid = 3;
  if (!this->_internal_rid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rid());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateRoomResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateRoomResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateRoomResponse::GetClassData() const { return &_class_data_; }


void CreateRoomResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateRoomResponse*>(&to_msg);
  auto& from = static_cast<const CreateRoomResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.CreateRoomResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (!from._internal_rid().empty()) {
    _this->_internal_set_rid(from._internal_rid());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateRoomResponse::CopyFrom(const CreateRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.CreateRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoomResponse::IsInitialized() const {
  return true;
}

void CreateRoomResponse::InternalSwap(CreateRoomResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rid_, lhs_arena,
      &other->_impl_.rid_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRoomResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[12]);
}

// ===================================================================

class JoinRoomRequest::_Internal {
 public:
};

JoinRoomRequest::JoinRoomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.JoinRoomRequest)
}
JoinRoomRequest::JoinRoomRequest(const JoinRoomRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JoinRoomRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.rid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rid().empty()) {
    _this->_impl_.rid_.Set(from._internal_rid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:GoBang.JoinRoomRequest)
}

inline void JoinRoomRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.rid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JoinRoomRequest::~JoinRoomRequest() {
  // @@protoc_insertion_point(destructor:GoBang.JoinRoomRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JoinRoomRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_.Destroy();
  _impl_.rid_.Destroy();
}

void JoinRoomRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JoinRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.JoinRoomRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _impl_.rid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinRoomRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.JoinRoomRequest.uid"));
        } else
          goto handle_unusual;
        continue;
      // string rid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_rid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.JoinRoomRequest.rid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JoinRoomRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.JoinRoomRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.JoinRoomRequest.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  // string rid = 2;
  if (!this->_internal_rid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rid().data(), static_cast<int>(this->_internal_rid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.JoinRoomRequest.rid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.JoinRoomRequest)
  return target;
}

size_t JoinRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.JoinRoomRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string rid = 2;
  if (!this->_internal_rid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JoinRoomRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JoinRoomRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JoinRoomRequest::GetClassData() const { return &_class_data_; }


void JoinRoomRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JoinRoomRequest*>(&to_msg);
  auto& from = static_cast<const JoinRoomRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.JoinRoomRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_rid().empty()) {
    _this->_internal_set_rid(from._internal_rid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JoinRoomRequest::CopyFrom(const JoinRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.JoinRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinRoomRequest::IsInitialized() const {
  return true;
}

void JoinRoomRequest::InternalSwap(JoinRoomRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rid_, lhs_arena,
      &other->_impl_.rid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinRoomRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[13]);
}

// ===================================================================

class JoinRoomResponse::_Internal {
 public:
};

JoinRoomResponse::JoinRoomResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.JoinRoomResponse)
}
JoinRoomResponse::JoinRoomResponse(const JoinRoomResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JoinRoomResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.rid_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rid().empty()) {
    _this->_impl_.rid_.Set(from._internal_rid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:GoBang.JoinRoomResponse)
}

inline void JoinRoomResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.rid_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JoinRoomResponse::~JoinRoomResponse() {
  // @@protoc_insertion_point(destructor:GoBang.JoinRoomResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JoinRoomResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
  _impl_.rid_.Destroy();
}

void JoinRoomResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JoinRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.JoinRoomResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _impl_.rid_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinRoomResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.JoinRoomResponse.msg"));
        } else
          goto handle_unusual;
        continue;
      // string rid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_rid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.JoinRoomResponse.rid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JoinRoomResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.JoinRoomResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.JoinRoomResponse.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // string rid = 3;
  if (!this->_internal_rid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rid().data(), static_cast<int>(this->_internal_rid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.JoinRoomResponse.rid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.JoinRoomResponse)
  return target;
}

size_t JoinRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.JoinRoomResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string rid = 3;
  if (!this->_internal_rid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rid());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JoinRoomResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JoinRoomResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JoinRoomResponse::GetClassData() const { return &_class_data_; }


void JoinRoomResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JoinRoomResponse*>(&to_msg);
  auto& from = static_cast<const JoinRoomResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.JoinRoomResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (!from._internal_rid().empty()) {
    _this->_internal_set_rid(from._internal_rid());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JoinRoomResponse::CopyFrom(const JoinRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.JoinRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinRoomResponse::IsInitialized() const {
  return true;
}

void JoinRoomResponse::InternalSwap(JoinRoomResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rid_, lhs_arena,
      &other->_impl_.rid_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinRoomResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[14]);
}

// ===================================================================

class Piece::_Internal {
 public:
};

Piece::Piece(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.Piece)
}
Piece::Piece(const Piece& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Piece* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.color_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.color_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.color_));
  // @@protoc_insertion_point(copy_constructor:GoBang.Piece)
}

inline void Piece::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.color_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Piece::~Piece() {
  // @@protoc_insertion_point(destructor:GoBang.Piece)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Piece::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Piece::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Piece::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.Piece)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.color_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.color_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Piece::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.PieceColor color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_color(static_cast<::GoBang::PieceColor>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Piece::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.Piece)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // .GoBang.PieceColor color = 3;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.Piece)
  return target;
}

size_t Piece::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.Piece)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // .GoBang.PieceColor color = 3;
  if (this->_internal_color() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_color());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Piece::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Piece::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Piece::GetClassData() const { return &_class_data_; }


void Piece::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Piece*>(&to_msg);
  auto& from = static_cast<const Piece&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.Piece)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_color() != 0) {
    _this->_internal_set_color(from._internal_color());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Piece::CopyFrom(const Piece& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.Piece)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Piece::IsInitialized() const {
  return true;
}

void Piece::InternalSwap(Piece* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Piece, _impl_.color_)
      + sizeof(Piece::_impl_.color_)
      - PROTOBUF_FIELD_OFFSET(Piece, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Piece::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[15]);
}

// ===================================================================

class Border::_Internal {
 public:
};

Border::Border(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.Border)
}
Border::Border(const Border& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Border* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.row_2_){}
    , decltype(_impl_.row_4_){}
    , decltype(_impl_.row_6_){}
    , decltype(_impl_.row_8_){}
    , decltype(_impl_.row_10_){}
    , decltype(_impl_.row_12_){}
    , decltype(_impl_.row_14_){}
    , decltype(_impl_.row_16_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.row_2_, &from._impl_.row_2_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.row_16_) -
    reinterpret_cast<char*>(&_impl_.row_2_)) + sizeof(_impl_.row_16_));
  // @@protoc_insertion_point(copy_constructor:GoBang.Border)
}

inline void Border::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.row_2_){int64_t{0}}
    , decltype(_impl_.row_4_){int64_t{0}}
    , decltype(_impl_.row_6_){int64_t{0}}
    , decltype(_impl_.row_8_){int64_t{0}}
    , decltype(_impl_.row_10_){int64_t{0}}
    , decltype(_impl_.row_12_){int64_t{0}}
    , decltype(_impl_.row_14_){int64_t{0}}
    , decltype(_impl_.row_16_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Border::~Border() {
  // @@protoc_insertion_point(destructor:GoBang.Border)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Border::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Border::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Border::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.Border)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.row_2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.row_16_) -
      reinterpret_cast<char*>(&_impl_.row_2_)) + sizeof(_impl_.row_16_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Border::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sfixed64 row_2 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.row_2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr);
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      // sfixed64 row_4 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.row_4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr);
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      // sfixed64 row_6 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.row_6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr);
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      // sfixed64 row_8 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.row_8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr);
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      // sfixed64 row_10 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.row_10_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr);
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      // sfixed64 row_12 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.row_12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr);
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      // sfixed64 row_14 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.row_14_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr);
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      // sfixed64 row_16 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.row_16_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr);
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Border::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.Border)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed64 row_2 = 1;
  if (this->_internal_row_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(1, this->_internal_row_2(), target);
  }

  // sfixed64 row_4 = 2;
  if (this->_internal_row_4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(2, this->_internal_row_4(), target);
  }

  // sfixed64 row_6 = 3;
  if (this->_internal_row_6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(3, this->_internal_row_6(), target);
  }

  // sfixed64 row_8 = 4;
  if (this->_internal_row_8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(4, this->_internal_row_8(), target);
  }

  // sfixed64 row_10 = 5;
  if (this->_internal_row_10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(5, this->_internal_row_10(), target);
  }

  // sfixed64 row_12 = 6;
  if (this->_internal_row_12() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(6, this->_internal_row_12(), target);
  }

  // sfixed64 row_14 = 7;
  if (this->_internal_row_14() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(7, this->_internal_row_14(), target);
  }

  // sfixed64 row_16 = 8;
  if (this->_internal_row_16() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(8, this->_internal_row_16(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.Border)
  return target;
}

size_t Border::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.Border)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sfixed64 row_2 = 1;
  if (this->_internal_row_2() != 0) {
    total_size += 1 + 8;
  }

  // sfixed64 row_4 = 2;
  if (this->_internal_row_4() != 0) {
    total_size += 1 + 8;
  }

  // sfixed64 row_6 = 3;
  if (this->_internal_row_6() != 0) {
    total_size += 1 + 8;
  }

  // sfixed64 row_8 = 4;
  if (this->_internal_row_8() != 0) {
    total_size += 1 + 8;
  }

  // sfixed64 row_10 = 5;
  if (this->_internal_row_10() != 0) {
    total_size += 1 + 8;
  }

  // sfixed64 row_12 = 6;
  if (this->_internal_row_12() != 0) {
    total_size += 1 + 8;
  }

  // sfixed64 row_14 = 7;
  if (this->_internal_row_14() != 0) {
    total_size += 1 + 8;
  }

  // sfixed64 row_16 = 8;
  if (this->_internal_row_16() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Border::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Border::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Border::GetClassData() const { return &_class_data_; }


void Border::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Border*>(&to_msg);
  auto& from = static_cast<const Border&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.Border)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_row_2() != 0) {
    _this->_internal_set_row_2(from._internal_row_2());
  }
  if (from._internal_row_4() != 0) {
    _this->_internal_set_row_4(from._internal_row_4());
  }
  if (from._internal_row_6() != 0) {
    _this->_internal_set_row_6(from._internal_row_6());
  }
  if (from._internal_row_8() != 0) {
    _this->_internal_set_row_8(from._internal_row_8());
  }
  if (from._internal_row_10() != 0) {
    _this->_internal_set_row_10(from._internal_row_10());
  }
  if (from._internal_row_12() != 0) {
    _this->_internal_set_row_12(from._internal_row_12());
  }
  if (from._internal_row_14() != 0) {
    _this->_internal_set_row_14(from._internal_row_14());
  }
  if (from._internal_row_16() != 0) {
    _this->_internal_set_row_16(from._internal_row_16());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Border::CopyFrom(const Border& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.Border)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Border::IsInitialized() const {
  return true;
}

void Border::InternalSwap(Border* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Border, _impl_.row_16_)
      + sizeof(Border::_impl_.row_16_)
      - PROTOBUF_FIELD_OFFSET(Border, _impl_.row_2_)>(
          reinterpret_cast<char*>(&_impl_.row_2_),
          reinterpret_cast<char*>(&other->_impl_.row_2_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Border::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[16]);
}

// ===================================================================

class SetPieceRequest::_Internal {
 public:
  static const ::GoBang::Piece& p(const SetPieceRequest* msg);
};

const ::GoBang::Piece&
SetPieceRequest::_Internal::p(const SetPieceRequest* msg) {
  return *msg->_impl_.p_;
}
SetPieceRequest::SetPieceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.SetPieceRequest)
}
SetPieceRequest::SetPieceRequest(const SetPieceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetPieceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.p_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_p()) {
    _this->_impl_.p_ = new ::GoBang::Piece(*from._impl_.p_);
  }
  // @@protoc_insertion_point(copy_constructor:GoBang.SetPieceRequest)
}

inline void SetPieceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.p_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetPieceRequest::~SetPieceRequest() {
  // @@protoc_insertion_point(destructor:GoBang.SetPieceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetPieceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.p_;
}

void SetPieceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetPieceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.SetPieceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.p_ != nullptr) {
    delete _impl_.p_;
  }
  _impl_.p_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPieceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .GoBang.Piece p = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_p(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetPieceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.SetPieceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .GoBang.Piece p = 1;
  if (this->_internal_has_p()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::p(this),
        _Internal::p(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.SetPieceRequest)
  return target;
}

size_t SetPieceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.SetPieceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GoBang.Piece p = 1;
  if (this->_internal_has_p()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.p_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetPieceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetPieceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetPieceRequest::GetClassData() const { return &_class_data_; }


void SetPieceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetPieceRequest*>(&to_msg);
  auto& from = static_cast<const SetPieceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.SetPieceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_p()) {
    _this->_internal_mutable_p()->::GoBang::Piece::MergeFrom(
        from._internal_p());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetPieceRequest::CopyFrom(const SetPieceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.SetPieceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPieceRequest::IsInitialized() const {
  return true;
}

void SetPieceRequest::InternalSwap(SetPieceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.p_, other->_impl_.p_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPieceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[17]);
}

// ===================================================================

class SetPieceResponse::_Internal {
 public:
  static const ::GoBang::Border& b(const SetPieceResponse* msg);
};

const ::GoBang::Border&
SetPieceResponse::_Internal::b(const SetPieceResponse* msg) {
  return *msg->_impl_.b_;
}
SetPieceResponse::SetPieceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.SetPieceResponse)
}
SetPieceResponse::SetPieceResponse(const SetPieceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetPieceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.b_){nullptr}
    , decltype(_impl_.success_){}
    , decltype(_impl_.next_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_b()) {
    _this->_impl_.b_ = new ::GoBang::Border(*from._impl_.b_);
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.next_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.next_));
  // @@protoc_insertion_point(copy_constructor:GoBang.SetPieceResponse)
}

inline void SetPieceResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.b_){nullptr}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.next_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetPieceResponse::~SetPieceResponse() {
  // @@protoc_insertion_point(destructor:GoBang.SetPieceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetPieceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.b_;
}

void SetPieceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetPieceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.SetPieceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.b_ != nullptr) {
    delete _impl_.b_;
  }
  _impl_.b_ = nullptr;
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.next_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.next_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPieceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.SetPieceResponse.msg"));
        } else
          goto handle_unusual;
        continue;
      // .GoBang.Border b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_b(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.PieceColor next = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_next(static_cast<::GoBang::PieceColor>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetPieceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.SetPieceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.SetPieceResponse.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // .GoBang.Border b = 3;
  if (this->_internal_has_b()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::b(this),
        _Internal::b(this).GetCachedSize(), target, stream);
  }

  // .GoBang.PieceColor next = 4;
  if (this->_internal_next() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_next(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.SetPieceResponse)
  return target;
}

size_t SetPieceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.SetPieceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // .GoBang.Border b = 3;
  if (this->_internal_has_b()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.b_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // .GoBang.PieceColor next = 4;
  if (this->_internal_next() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_next());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetPieceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetPieceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetPieceResponse::GetClassData() const { return &_class_data_; }


void SetPieceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetPieceResponse*>(&to_msg);
  auto& from = static_cast<const SetPieceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.SetPieceResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_has_b()) {
    _this->_internal_mutable_b()->::GoBang::Border::MergeFrom(
        from._internal_b());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_next() != 0) {
    _this->_internal_set_next(from._internal_next());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetPieceResponse::CopyFrom(const SetPieceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.SetPieceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPieceResponse::IsInitialized() const {
  return true;
}

void SetPieceResponse::InternalSwap(SetPieceResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetPieceResponse, _impl_.next_)
      + sizeof(SetPieceResponse::_impl_.next_)
      - PROTOBUF_FIELD_OFFSET(SetPieceResponse, _impl_.b_)>(
          reinterpret_cast<char*>(&_impl_.b_),
          reinterpret_cast<char*>(&other->_impl_.b_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPieceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[18]);
}

// ===================================================================

class UndoRequest::_Internal {
 public:
};

UndoRequest::UndoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.UndoRequest)
}
UndoRequest::UndoRequest(const UndoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UndoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:GoBang.UndoRequest)
}

inline void UndoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UndoRequest::~UndoRequest() {
  // @@protoc_insertion_point(destructor:GoBang.UndoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UndoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_.Destroy();
}

void UndoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UndoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.UndoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.UndoRequest.uid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UndoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.UndoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.UndoRequest.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.UndoRequest)
  return target;
}

size_t UndoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.UndoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UndoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoRequest::GetClassData() const { return &_class_data_; }


void UndoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UndoRequest*>(&to_msg);
  auto& from = static_cast<const UndoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.UndoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoRequest::CopyFrom(const UndoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.UndoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoRequest::IsInitialized() const {
  return true;
}

void UndoRequest::InternalSwap(UndoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[19]);
}

// ===================================================================

class UndoResponse::_Internal {
 public:
};

UndoResponse::UndoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.UndoResponse)
}
UndoResponse::UndoResponse(const UndoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UndoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:GoBang.UndoResponse)
}

inline void UndoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UndoResponse::~UndoResponse() {
  // @@protoc_insertion_point(destructor:GoBang.UndoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UndoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UndoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UndoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.UndoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UndoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.UndoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.UndoResponse)
  return target;
}

size_t UndoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.UndoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UndoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndoResponse::GetClassData() const { return &_class_data_; }


void UndoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UndoResponse*>(&to_msg);
  auto& from = static_cast<const UndoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.UndoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndoResponse::CopyFrom(const UndoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.UndoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoResponse::IsInitialized() const {
  return true;
}

void UndoResponse::InternalSwap(UndoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UndoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[20]);
}

// ===================================================================

class TieRequest::_Internal {
 public:
};

TieRequest::TieRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.TieRequest)
}
TieRequest::TieRequest(const TieRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TieRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:GoBang.TieRequest)
}

inline void TieRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TieRequest::~TieRequest() {
  // @@protoc_insertion_point(destructor:GoBang.TieRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TieRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_.Destroy();
}

void TieRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TieRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.TieRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TieRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.TieRequest.uid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TieRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.TieRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.TieRequest.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.TieRequest)
  return target;
}

size_t TieRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.TieRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TieRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TieRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TieRequest::GetClassData() const { return &_class_data_; }


void TieRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TieRequest*>(&to_msg);
  auto& from = static_cast<const TieRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.TieRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TieRequest::CopyFrom(const TieRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.TieRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TieRequest::IsInitialized() const {
  return true;
}

void TieRequest::InternalSwap(TieRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TieRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[21]);
}

// ===================================================================

class TieResponse::_Internal {
 public:
};

TieResponse::TieResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.TieResponse)
}
TieResponse::TieResponse(const TieResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TieResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:GoBang.TieResponse)
}

inline void TieResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TieResponse::~TieResponse() {
  // @@protoc_insertion_point(destructor:GoBang.TieResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TieResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TieResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TieResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.TieResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TieResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TieResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.TieResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.TieResponse)
  return target;
}

size_t TieResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.TieResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TieResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TieResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TieResponse::GetClassData() const { return &_class_data_; }


void TieResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TieResponse*>(&to_msg);
  auto& from = static_cast<const TieResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.TieResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TieResponse::CopyFrom(const TieResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.TieResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TieResponse::IsInitialized() const {
  return true;
}

void TieResponse::InternalSwap(TieResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TieResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[22]);
}

// ===================================================================

class SurrenderRequest::_Internal {
 public:
};

SurrenderRequest::SurrenderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.SurrenderRequest)
}
SurrenderRequest::SurrenderRequest(const SurrenderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SurrenderRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:GoBang.SurrenderRequest)
}

inline void SurrenderRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SurrenderRequest::~SurrenderRequest() {
  // @@protoc_insertion_point(destructor:GoBang.SurrenderRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SurrenderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_.Destroy();
}

void SurrenderRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SurrenderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.SurrenderRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SurrenderRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.SurrenderRequest.uid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SurrenderRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.SurrenderRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.SurrenderRequest.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.SurrenderRequest)
  return target;
}

size_t SurrenderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.SurrenderRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SurrenderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SurrenderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SurrenderRequest::GetClassData() const { return &_class_data_; }


void SurrenderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SurrenderRequest*>(&to_msg);
  auto& from = static_cast<const SurrenderRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.SurrenderRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SurrenderRequest::CopyFrom(const SurrenderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.SurrenderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurrenderRequest::IsInitialized() const {
  return true;
}

void SurrenderRequest::InternalSwap(SurrenderRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SurrenderRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[23]);
}

// ===================================================================

class Messg::_Internal {
 public:
};

Messg::Messg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.Messg)
}
Messg::Messg(const Messg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Messg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:GoBang.Messg)
}

inline void Messg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Messg::~Messg() {
  // @@protoc_insertion_point(destructor:GoBang.Messg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Messg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.msg_.Destroy();
}

void Messg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Messg::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.Messg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Messg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.Messg.name"));
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.Messg.msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Messg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.Messg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.Messg.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.Messg.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.Messg)
  return target;
}

size_t Messg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.Messg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Messg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Messg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Messg::GetClassData() const { return &_class_data_; }


void Messg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Messg*>(&to_msg);
  auto& from = static_cast<const Messg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.Messg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Messg::CopyFrom(const Messg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.Messg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Messg::IsInitialized() const {
  return true;
}

void Messg::InternalSwap(Messg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Messg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[24]);
}

// ===================================================================

class ContinueGameRequest::_Internal {
 public:
};

ContinueGameRequest::ContinueGameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.ContinueGameRequest)
}
ContinueGameRequest::ContinueGameRequest(const ContinueGameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContinueGameRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:GoBang.ContinueGameRequest)
}

inline void ContinueGameRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContinueGameRequest::~ContinueGameRequest() {
  // @@protoc_insertion_point(destructor:GoBang.ContinueGameRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContinueGameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_.Destroy();
}

void ContinueGameRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContinueGameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.ContinueGameRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContinueGameRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.ContinueGameRequest.uid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContinueGameRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.ContinueGameRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.ContinueGameRequest.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.ContinueGameRequest)
  return target;
}

size_t ContinueGameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.ContinueGameRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContinueGameRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContinueGameRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContinueGameRequest::GetClassData() const { return &_class_data_; }


void ContinueGameRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContinueGameRequest*>(&to_msg);
  auto& from = static_cast<const ContinueGameRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.ContinueGameRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContinueGameRequest::CopyFrom(const ContinueGameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.ContinueGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContinueGameRequest::IsInitialized() const {
  return true;
}

void ContinueGameRequest::InternalSwap(ContinueGameRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ContinueGameRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[25]);
}

// ===================================================================

class ContinueGameResponse::_Internal {
 public:
};

ContinueGameResponse::ContinueGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:GoBang.ContinueGameResponse)
}
ContinueGameResponse::ContinueGameResponse(const ContinueGameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ContinueGameResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GoBang.ContinueGameResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContinueGameResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContinueGameResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ContinueGameResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[26]);
}

// ===================================================================

class QuitRoomRequest::_Internal {
 public:
};

QuitRoomRequest::QuitRoomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.QuitRoomRequest)
}
QuitRoomRequest::QuitRoomRequest(const QuitRoomRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuitRoomRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:GoBang.QuitRoomRequest)
}

inline void QuitRoomRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QuitRoomRequest::~QuitRoomRequest() {
  // @@protoc_insertion_point(destructor:GoBang.QuitRoomRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuitRoomRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_.Destroy();
}

void QuitRoomRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuitRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.QuitRoomRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuitRoomRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.QuitRoomRequest.uid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuitRoomRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.QuitRoomRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.QuitRoomRequest.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.QuitRoomRequest)
  return target;
}

size_t QuitRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.QuitRoomRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuitRoomRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuitRoomRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuitRoomRequest::GetClassData() const { return &_class_data_; }


void QuitRoomRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuitRoomRequest*>(&to_msg);
  auto& from = static_cast<const QuitRoomRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.QuitRoomRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuitRoomRequest::CopyFrom(const QuitRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.QuitRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitRoomRequest::IsInitialized() const {
  return true;
}

void QuitRoomRequest::InternalSwap(QuitRoomRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata QuitRoomRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[27]);
}

// ===================================================================

class QuitRoomResponse::_Internal {
 public:
};

QuitRoomResponse::QuitRoomResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.QuitRoomResponse)
}
QuitRoomResponse::QuitRoomResponse(const QuitRoomResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuitRoomResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:GoBang.QuitRoomResponse)
}

inline void QuitRoomResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QuitRoomResponse::~QuitRoomResponse() {
  // @@protoc_insertion_point(destructor:GoBang.QuitRoomResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuitRoomResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_.Destroy();
}

void QuitRoomResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuitRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.QuitRoomResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuitRoomResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.QuitRoomResponse.uid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuitRoomResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.QuitRoomResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.QuitRoomResponse.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.QuitRoomResponse)
  return target;
}

size_t QuitRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.QuitRoomResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuitRoomResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuitRoomResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuitRoomResponse::GetClassData() const { return &_class_data_; }


void QuitRoomResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuitRoomResponse*>(&to_msg);
  auto& from = static_cast<const QuitRoomResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.QuitRoomResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuitRoomResponse::CopyFrom(const QuitRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.QuitRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitRoomResponse::IsInitialized() const {
  return true;
}

void QuitRoomResponse::InternalSwap(QuitRoomResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata QuitRoomResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[28]);
}

// ===================================================================

class GameStart::_Internal {
 public:
};

GameStart::GameStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.GameStart)
}
GameStart::GameStart(const GameStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameStart* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.competitorname_){}
    , decltype(_impl_.competitorid_){}
    , decltype(_impl_.rid_){}
    , decltype(_impl_.mycolor_){}
    , decltype(_impl_.competitorcolor_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.competitorname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.competitorname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_competitorname().empty()) {
    _this->_impl_.competitorname_.Set(from._internal_competitorname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.competitorid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.competitorid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_competitorid().empty()) {
    _this->_impl_.competitorid_.Set(from._internal_competitorid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rid().empty()) {
    _this->_impl_.rid_.Set(from._internal_rid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mycolor_, &from._impl_.mycolor_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.competitorcolor_) -
    reinterpret_cast<char*>(&_impl_.mycolor_)) + sizeof(_impl_.competitorcolor_));
  // @@protoc_insertion_point(copy_constructor:GoBang.GameStart)
}

inline void GameStart::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.competitorname_){}
    , decltype(_impl_.competitorid_){}
    , decltype(_impl_.rid_){}
    , decltype(_impl_.mycolor_){0}
    , decltype(_impl_.competitorcolor_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.competitorname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.competitorname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.competitorid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.competitorid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GameStart::~GameStart() {
  // @@protoc_insertion_point(destructor:GoBang.GameStart)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameStart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.competitorname_.Destroy();
  _impl_.competitorid_.Destroy();
  _impl_.rid_.Destroy();
}

void GameStart::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameStart::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.GameStart)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.competitorname_.ClearToEmpty();
  _impl_.competitorid_.ClearToEmpty();
  _impl_.rid_.ClearToEmpty();
  ::memset(&_impl_.mycolor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.competitorcolor_) -
      reinterpret_cast<char*>(&_impl_.mycolor_)) + sizeof(_impl_.competitorcolor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameStart::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .GoBang.PieceColor myColor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mycolor(static_cast<::GoBang::PieceColor>(val));
        } else
          goto handle_unusual;
        continue;
      // .GoBang.PieceColor competitorColor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_competitorcolor(static_cast<::GoBang::PieceColor>(val));
        } else
          goto handle_unusual;
        continue;
      // string competitorName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_competitorname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.GameStart.competitorName"));
        } else
          goto handle_unusual;
        continue;
      // string competitorID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_competitorid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.GameStart.competitorID"));
        } else
          goto handle_unusual;
        continue;
      // string rid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_rid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.GameStart.rid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameStart::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.GameStart)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .GoBang.PieceColor myColor = 1;
  if (this->_internal_mycolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mycolor(), target);
  }

  // .GoBang.PieceColor competitorColor = 2;
  if (this->_internal_competitorcolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_competitorcolor(), target);
  }

  // string competitorName = 3;
  if (!this->_internal_competitorname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_competitorname().data(), static_cast<int>(this->_internal_competitorname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.GameStart.competitorName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_competitorname(), target);
  }

  // string competitorID = 4;
  if (!this->_internal_competitorid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_competitorid().data(), static_cast<int>(this->_internal_competitorid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.GameStart.competitorID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_competitorid(), target);
  }

  // string rid = 5;
  if (!this->_internal_rid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rid().data(), static_cast<int>(this->_internal_rid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.GameStart.rid");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_rid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.GameStart)
  return target;
}

size_t GameStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.GameStart)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string competitorName = 3;
  if (!this->_internal_competitorname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_competitorname());
  }

  // string competitorID = 4;
  if (!this->_internal_competitorid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_competitorid());
  }

  // string rid = 5;
  if (!this->_internal_rid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rid());
  }

  // .GoBang.PieceColor myColor = 1;
  if (this->_internal_mycolor() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mycolor());
  }

  // .GoBang.PieceColor competitorColor = 2;
  if (this->_internal_competitorcolor() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_competitorcolor());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameStart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameStart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameStart::GetClassData() const { return &_class_data_; }


void GameStart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameStart*>(&to_msg);
  auto& from = static_cast<const GameStart&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.GameStart)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_competitorname().empty()) {
    _this->_internal_set_competitorname(from._internal_competitorname());
  }
  if (!from._internal_competitorid().empty()) {
    _this->_internal_set_competitorid(from._internal_competitorid());
  }
  if (!from._internal_rid().empty()) {
    _this->_internal_set_rid(from._internal_rid());
  }
  if (from._internal_mycolor() != 0) {
    _this->_internal_set_mycolor(from._internal_mycolor());
  }
  if (from._internal_competitorcolor() != 0) {
    _this->_internal_set_competitorcolor(from._internal_competitorcolor());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameStart::CopyFrom(const GameStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.GameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStart::IsInitialized() const {
  return true;
}

void GameStart::InternalSwap(GameStart* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.competitorname_, lhs_arena,
      &other->_impl_.competitorname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.competitorid_, lhs_arena,
      &other->_impl_.competitorid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rid_, lhs_arena,
      &other->_impl_.rid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameStart, _impl_.competitorcolor_)
      + sizeof(GameStart::_impl_.competitorcolor_)
      - PROTOBUF_FIELD_OFFSET(GameStart, _impl_.mycolor_)>(
          reinterpret_cast<char*>(&_impl_.mycolor_),
          reinterpret_cast<char*>(&other->_impl_.mycolor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameStart::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[29]);
}

// ===================================================================

class GameOver::_Internal {
 public:
};

GameOver::GameOver(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.GameOver)
}
GameOver::GameOver(const GameOver& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameOver* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.winuid_){}
    , decltype(_impl_.iswin_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.winuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.winuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_winuid().empty()) {
    _this->_impl_.winuid_.Set(from._internal_winuid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.iswin_ = from._impl_.iswin_;
  // @@protoc_insertion_point(copy_constructor:GoBang.GameOver)
}

inline void GameOver::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.winuid_){}
    , decltype(_impl_.iswin_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.winuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.winuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GameOver::~GameOver() {
  // @@protoc_insertion_point(destructor:GoBang.GameOver)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameOver::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.winuid_.Destroy();
}

void GameOver::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameOver::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.GameOver)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.winuid_.ClearToEmpty();
  _impl_.iswin_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameOver::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isWin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.iswin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string winUid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_winuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GoBang.GameOver.winUid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameOver::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.GameOver)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isWin = 1;
  if (this->_internal_iswin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_iswin(), target);
  }

  // string winUid = 2;
  if (!this->_internal_winuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_winuid().data(), static_cast<int>(this->_internal_winuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GoBang.GameOver.winUid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_winuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.GameOver)
  return target;
}

size_t GameOver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.GameOver)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string winUid = 2;
  if (!this->_internal_winuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_winuid());
  }

  // bool isWin = 1;
  if (this->_internal_iswin() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameOver::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameOver::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameOver::GetClassData() const { return &_class_data_; }


void GameOver::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameOver*>(&to_msg);
  auto& from = static_cast<const GameOver&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.GameOver)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_winuid().empty()) {
    _this->_internal_set_winuid(from._internal_winuid());
  }
  if (from._internal_iswin() != 0) {
    _this->_internal_set_iswin(from._internal_iswin());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameOver::CopyFrom(const GameOver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.GameOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameOver::IsInitialized() const {
  return true;
}

void GameOver::InternalSwap(GameOver* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.winuid_, lhs_arena,
      &other->_impl_.winuid_, rhs_arena
  );
  swap(_impl_.iswin_, other->_impl_.iswin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameOver::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[30]);
}

// ===================================================================

class goBangRequest::_Internal {
 public:
  static const ::GoBang::LoginRequest& loginreq(const goBangRequest* msg);
  static const ::GoBang::RegisterRequest& registerreq(const goBangRequest* msg);
  static const ::GoBang::RankListRequest& ranklistreq(const goBangRequest* msg);
  static const ::GoBang::CreateRoomRequest& createroomreq(const goBangRequest* msg);
  static const ::GoBang::SetPieceRequest& setpiecereq(const goBangRequest* msg);
  static const ::GoBang::UndoRequest& undoreq(const goBangRequest* msg);
  static const ::GoBang::UndoResponse& undoresp(const goBangRequest* msg);
  static const ::GoBang::TieRequest& tiereq(const goBangRequest* msg);
  static const ::GoBang::TieResponse& tieresp(const goBangRequest* msg);
  static const ::GoBang::SurrenderRequest& surrenderreq(const goBangRequest* msg);
  static const ::GoBang::Messg& messg(const goBangRequest* msg);
  static const ::GoBang::ContinueGameRequest& continuegamereq(const goBangRequest* msg);
  static const ::GoBang::QuitRoomRequest& quitroomreq(const goBangRequest* msg);
  static const ::GoBang::NormalMatchRequest& normalmatchreq(const goBangRequest* msg);
  static const ::GoBang::RankMatchRequest& rankmatchreq(const goBangRequest* msg);
};

const ::GoBang::LoginRequest&
goBangRequest::_Internal::loginreq(const goBangRequest* msg) {
  return *msg->_impl_.request_.loginreq_;
}
const ::GoBang::RegisterRequest&
goBangRequest::_Internal::registerreq(const goBangRequest* msg) {
  return *msg->_impl_.request_.registerreq_;
}
const ::GoBang::RankListRequest&
goBangRequest::_Internal::ranklistreq(const goBangRequest* msg) {
  return *msg->_impl_.request_.ranklistreq_;
}
const ::GoBang::CreateRoomRequest&
goBangRequest::_Internal::createroomreq(const goBangRequest* msg) {
  return *msg->_impl_.request_.createroomreq_;
}
const ::GoBang::SetPieceRequest&
goBangRequest::_Internal::setpiecereq(const goBangRequest* msg) {
  return *msg->_impl_.request_.setpiecereq_;
}
const ::GoBang::UndoRequest&
goBangRequest::_Internal::undoreq(const goBangRequest* msg) {
  return *msg->_impl_.request_.undoreq_;
}
const ::GoBang::UndoResponse&
goBangRequest::_Internal::undoresp(const goBangRequest* msg) {
  return *msg->_impl_.request_.undoresp_;
}
const ::GoBang::TieRequest&
goBangRequest::_Internal::tiereq(const goBangRequest* msg) {
  return *msg->_impl_.request_.tiereq_;
}
const ::GoBang::TieResponse&
goBangRequest::_Internal::tieresp(const goBangRequest* msg) {
  return *msg->_impl_.request_.tieresp_;
}
const ::GoBang::SurrenderRequest&
goBangRequest::_Internal::surrenderreq(const goBangRequest* msg) {
  return *msg->_impl_.request_.surrenderreq_;
}
const ::GoBang::Messg&
goBangRequest::_Internal::messg(const goBangRequest* msg) {
  return *msg->_impl_.request_.messg_;
}
const ::GoBang::ContinueGameRequest&
goBangRequest::_Internal::continuegamereq(const goBangRequest* msg) {
  return *msg->_impl_.request_.continuegamereq_;
}
const ::GoBang::QuitRoomRequest&
goBangRequest::_Internal::quitroomreq(const goBangRequest* msg) {
  return *msg->_impl_.request_.quitroomreq_;
}
const ::GoBang::NormalMatchRequest&
goBangRequest::_Internal::normalmatchreq(const goBangRequest* msg) {
  return *msg->_impl_.request_.normalmatchreq_;
}
const ::GoBang::RankMatchRequest&
goBangRequest::_Internal::rankmatchreq(const goBangRequest* msg) {
  return *msg->_impl_.request_.rankmatchreq_;
}
void goBangRequest::set_allocated_loginreq(::GoBang::LoginRequest* loginreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (loginreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(loginreq);
    if (message_arena != submessage_arena) {
      loginreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loginreq, submessage_arena);
    }
    set_has_loginreq();
    _impl_.request_.loginreq_ = loginreq;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangRequest.loginReq)
}
void goBangRequest::set_allocated_registerreq(::GoBang::RegisterRequest* registerreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (registerreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(registerreq);
    if (message_arena != submessage_arena) {
      registerreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, registerreq, submessage_arena);
    }
    set_has_registerreq();
    _impl_.request_.registerreq_ = registerreq;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangRequest.RegisterReq)
}
void goBangRequest::set_allocated_ranklistreq(::GoBang::RankListRequest* ranklistreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (ranklistreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ranklistreq);
    if (message_arena != submessage_arena) {
      ranklistreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ranklistreq, submessage_arena);
    }
    set_has_ranklistreq();
    _impl_.request_.ranklistreq_ = ranklistreq;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangRequest.rankListReq)
}
void goBangRequest::set_allocated_createroomreq(::GoBang::CreateRoomRequest* createroomreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (createroomreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(createroomreq);
    if (message_arena != submessage_arena) {
      createroomreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, createroomreq, submessage_arena);
    }
    set_has_createroomreq();
    _impl_.request_.createroomreq_ = createroomreq;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangRequest.createRoomReq)
}
void goBangRequest::set_allocated_setpiecereq(::GoBang::SetPieceRequest* setpiecereq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (setpiecereq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(setpiecereq);
    if (message_arena != submessage_arena) {
      setpiecereq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setpiecereq, submessage_arena);
    }
    set_has_setpiecereq();
    _impl_.request_.setpiecereq_ = setpiecereq;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangRequest.setPieceReq)
}
void goBangRequest::set_allocated_undoreq(::GoBang::UndoRequest* undoreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (undoreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(undoreq);
    if (message_arena != submessage_arena) {
      undoreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undoreq, submessage_arena);
    }
    set_has_undoreq();
    _impl_.request_.undoreq_ = undoreq;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangRequest.undoReq)
}
void goBangRequest::set_allocated_undoresp(::GoBang::UndoResponse* undoresp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (undoresp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(undoresp);
    if (message_arena != submessage_arena) {
      undoresp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undoresp, submessage_arena);
    }
    set_has_undoresp();
    _impl_.request_.undoresp_ = undoresp;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangRequest.undoResp)
}
void goBangRequest::set_allocated_tiereq(::GoBang::TieRequest* tiereq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (tiereq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tiereq);
    if (message_arena != submessage_arena) {
      tiereq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tiereq, submessage_arena);
    }
    set_has_tiereq();
    _impl_.request_.tiereq_ = tiereq;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangRequest.tieReq)
}
void goBangRequest::set_allocated_tieresp(::GoBang::TieResponse* tieresp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (tieresp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tieresp);
    if (message_arena != submessage_arena) {
      tieresp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tieresp, submessage_arena);
    }
    set_has_tieresp();
    _impl_.request_.tieresp_ = tieresp;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangRequest.tieResp)
}
void goBangRequest::set_allocated_surrenderreq(::GoBang::SurrenderRequest* surrenderreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (surrenderreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(surrenderreq);
    if (message_arena != submessage_arena) {
      surrenderreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, surrenderreq, submessage_arena);
    }
    set_has_surrenderreq();
    _impl_.request_.surrenderreq_ = surrenderreq;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangRequest.surrenderReq)
}
void goBangRequest::set_allocated_messg(::GoBang::Messg* messg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (messg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(messg);
    if (message_arena != submessage_arena) {
      messg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messg, submessage_arena);
    }
    set_has_messg();
    _impl_.request_.messg_ = messg;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangRequest.messg)
}
void goBangRequest::set_allocated_continuegamereq(::GoBang::ContinueGameRequest* continuegamereq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (continuegamereq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(continuegamereq);
    if (message_arena != submessage_arena) {
      continuegamereq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, continuegamereq, submessage_arena);
    }
    set_has_continuegamereq();
    _impl_.request_.continuegamereq_ = continuegamereq;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangRequest.continueGameReq)
}
void goBangRequest::set_allocated_quitroomreq(::GoBang::QuitRoomRequest* quitroomreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (quitroomreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(quitroomreq);
    if (message_arena != submessage_arena) {
      quitroomreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quitroomreq, submessage_arena);
    }
    set_has_quitroomreq();
    _impl_.request_.quitroomreq_ = quitroomreq;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangRequest.quitRoomReq)
}
void goBangRequest::set_allocated_normalmatchreq(::GoBang::NormalMatchRequest* normalmatchreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (normalmatchreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(normalmatchreq);
    if (message_arena != submessage_arena) {
      normalmatchreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normalmatchreq, submessage_arena);
    }
    set_has_normalmatchreq();
    _impl_.request_.normalmatchreq_ = normalmatchreq;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangRequest.normalMatchReq)
}
void goBangRequest::set_allocated_rankmatchreq(::GoBang::RankMatchRequest* rankmatchreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (rankmatchreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rankmatchreq);
    if (message_arena != submessage_arena) {
      rankmatchreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rankmatchreq, submessage_arena);
    }
    set_has_rankmatchreq();
    _impl_.request_.rankmatchreq_ = rankmatchreq;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangRequest.rankMatchReq)
}
goBangRequest::goBangRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.goBangRequest)
}
goBangRequest::goBangRequest(const goBangRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  goBangRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.request_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  clear_has_request();
  switch (from.request_case()) {
    case kLoginReq: {
      _this->_internal_mutable_loginreq()->::GoBang::LoginRequest::MergeFrom(
          from._internal_loginreq());
      break;
    }
    case kRegisterReq: {
      _this->_internal_mutable_registerreq()->::GoBang::RegisterRequest::MergeFrom(
          from._internal_registerreq());
      break;
    }
    case kRankListReq: {
      _this->_internal_mutable_ranklistreq()->::GoBang::RankListRequest::MergeFrom(
          from._internal_ranklistreq());
      break;
    }
    case kCreateRoomReq: {
      _this->_internal_mutable_createroomreq()->::GoBang::CreateRoomRequest::MergeFrom(
          from._internal_createroomreq());
      break;
    }
    case kSetPieceReq: {
      _this->_internal_mutable_setpiecereq()->::GoBang::SetPieceRequest::MergeFrom(
          from._internal_setpiecereq());
      break;
    }
    case kUndoReq: {
      _this->_internal_mutable_undoreq()->::GoBang::UndoRequest::MergeFrom(
          from._internal_undoreq());
      break;
    }
    case kUndoResp: {
      _this->_internal_mutable_undoresp()->::GoBang::UndoResponse::MergeFrom(
          from._internal_undoresp());
      break;
    }
    case kTieReq: {
      _this->_internal_mutable_tiereq()->::GoBang::TieRequest::MergeFrom(
          from._internal_tiereq());
      break;
    }
    case kTieResp: {
      _this->_internal_mutable_tieresp()->::GoBang::TieResponse::MergeFrom(
          from._internal_tieresp());
      break;
    }
    case kSurrenderReq: {
      _this->_internal_mutable_surrenderreq()->::GoBang::SurrenderRequest::MergeFrom(
          from._internal_surrenderreq());
      break;
    }
    case kMessg: {
      _this->_internal_mutable_messg()->::GoBang::Messg::MergeFrom(
          from._internal_messg());
      break;
    }
    case kContinueGameReq: {
      _this->_internal_mutable_continuegamereq()->::GoBang::ContinueGameRequest::MergeFrom(
          from._internal_continuegamereq());
      break;
    }
    case kQuitRoomReq: {
      _this->_internal_mutable_quitroomreq()->::GoBang::QuitRoomRequest::MergeFrom(
          from._internal_quitroomreq());
      break;
    }
    case kNormalMatchReq: {
      _this->_internal_mutable_normalmatchreq()->::GoBang::NormalMatchRequest::MergeFrom(
          from._internal_normalmatchreq());
      break;
    }
    case kRankMatchReq: {
      _this->_internal_mutable_rankmatchreq()->::GoBang::RankMatchRequest::MergeFrom(
          from._internal_rankmatchreq());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:GoBang.goBangRequest)
}

inline void goBangRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , decltype(_impl_.request_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_request();
}

goBangRequest::~goBangRequest() {
  // @@protoc_insertion_point(destructor:GoBang.goBangRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void goBangRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_request()) {
    clear_request();
  }
}

void goBangRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void goBangRequest::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:GoBang.goBangRequest)
  switch (request_case()) {
    case kLoginReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.loginreq_;
      }
      break;
    }
    case kRegisterReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.registerreq_;
      }
      break;
    }
    case kRankListReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.ranklistreq_;
      }
      break;
    }
    case kCreateRoomReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.createroomreq_;
      }
      break;
    }
    case kSetPieceReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.setpiecereq_;
      }
      break;
    }
    case kUndoReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.undoreq_;
      }
      break;
    }
    case kUndoResp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.undoresp_;
      }
      break;
    }
    case kTieReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.tiereq_;
      }
      break;
    }
    case kTieResp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.tieresp_;
      }
      break;
    }
    case kSurrenderReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.surrenderreq_;
      }
      break;
    }
    case kMessg: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.messg_;
      }
      break;
    }
    case kContinueGameReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.continuegamereq_;
      }
      break;
    }
    case kQuitRoomReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.quitroomreq_;
      }
      break;
    }
    case kNormalMatchReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.normalmatchreq_;
      }
      break;
    }
    case kRankMatchReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.rankmatchreq_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REQUEST_NOT_SET;
}


void goBangRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.goBangRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_ = 0;
  clear_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* goBangRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .GoBang.TYPE type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::GoBang::TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .GoBang.LoginRequest loginReq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_loginreq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.RegisterRequest RegisterReq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_registerreq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.RankListRequest rankListReq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ranklistreq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.CreateRoomRequest createRoomReq = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_createroomreq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.SetPieceRequest setPieceReq = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_setpiecereq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.UndoRequest undoReq = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_undoreq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.TieRequest tieReq = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tiereq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.SurrenderRequest surrenderReq = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_surrenderreq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.Messg messg = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_messg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.ContinueGameRequest continueGameReq = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_continuegamereq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.QuitRoomRequest quitRoomReq = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_quitroomreq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.NormalMatchRequest normalMatchReq = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_normalmatchreq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.TieResponse tieResp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tieresp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.UndoResponse undoResp = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_undoresp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.RankMatchRequest rankMatchReq = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_rankmatchreq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* goBangRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.goBangRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .GoBang.TYPE type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .GoBang.LoginRequest loginReq = 2;
  if (_internal_has_loginreq()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::loginreq(this),
        _Internal::loginreq(this).GetCachedSize(), target, stream);
  }

  // .GoBang.RegisterRequest RegisterReq = 3;
  if (_internal_has_registerreq()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::registerreq(this),
        _Internal::registerreq(this).GetCachedSize(), target, stream);
  }

  // .GoBang.RankListRequest rankListReq = 4;
  if (_internal_has_ranklistreq()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::ranklistreq(this),
        _Internal::ranklistreq(this).GetCachedSize(), target, stream);
  }

  // .GoBang.CreateRoomRequest createRoomReq = 5;
  if (_internal_has_createroomreq()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::createroomreq(this),
        _Internal::createroomreq(this).GetCachedSize(), target, stream);
  }

  // .GoBang.SetPieceRequest setPieceReq = 6;
  if (_internal_has_setpiecereq()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::setpiecereq(this),
        _Internal::setpiecereq(this).GetCachedSize(), target, stream);
  }

  // .GoBang.UndoRequest undoReq = 7;
  if (_internal_has_undoreq()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::undoreq(this),
        _Internal::undoreq(this).GetCachedSize(), target, stream);
  }

  // .GoBang.TieRequest tieReq = 8;
  if (_internal_has_tiereq()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::tiereq(this),
        _Internal::tiereq(this).GetCachedSize(), target, stream);
  }

  // .GoBang.SurrenderRequest surrenderReq = 9;
  if (_internal_has_surrenderreq()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::surrenderreq(this),
        _Internal::surrenderreq(this).GetCachedSize(), target, stream);
  }

  // .GoBang.Messg messg = 10;
  if (_internal_has_messg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::messg(this),
        _Internal::messg(this).GetCachedSize(), target, stream);
  }

  // .GoBang.ContinueGameRequest continueGameReq = 11;
  if (_internal_has_continuegamereq()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::continuegamereq(this),
        _Internal::continuegamereq(this).GetCachedSize(), target, stream);
  }

  // .GoBang.QuitRoomRequest quitRoomReq = 12;
  if (_internal_has_quitroomreq()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::quitroomreq(this),
        _Internal::quitroomreq(this).GetCachedSize(), target, stream);
  }

  // .GoBang.NormalMatchRequest normalMatchReq = 13;
  if (_internal_has_normalmatchreq()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::normalmatchreq(this),
        _Internal::normalmatchreq(this).GetCachedSize(), target, stream);
  }

  // .GoBang.TieResponse tieResp = 14;
  if (_internal_has_tieresp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::tieresp(this),
        _Internal::tieresp(this).GetCachedSize(), target, stream);
  }

  // .GoBang.UndoResponse undoResp = 15;
  if (_internal_has_undoresp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::undoresp(this),
        _Internal::undoresp(this).GetCachedSize(), target, stream);
  }

  // .GoBang.RankMatchRequest rankMatchReq = 16;
  if (_internal_has_rankmatchreq()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::rankmatchreq(this),
        _Internal::rankmatchreq(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.goBangRequest)
  return target;
}

size_t goBangRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.goBangRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GoBang.TYPE type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (request_case()) {
    // .GoBang.LoginRequest loginReq = 2;
    case kLoginReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.loginreq_);
      break;
    }
    // .GoBang.RegisterRequest RegisterReq = 3;
    case kRegisterReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.registerreq_);
      break;
    }
    // .GoBang.RankListRequest rankListReq = 4;
    case kRankListReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.ranklistreq_);
      break;
    }
    // .GoBang.CreateRoomRequest createRoomReq = 5;
    case kCreateRoomReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.createroomreq_);
      break;
    }
    // .GoBang.SetPieceRequest setPieceReq = 6;
    case kSetPieceReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.setpiecereq_);
      break;
    }
    // .GoBang.UndoRequest undoReq = 7;
    case kUndoReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.undoreq_);
      break;
    }
    // .GoBang.UndoResponse undoResp = 15;
    case kUndoResp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.undoresp_);
      break;
    }
    // .GoBang.TieRequest tieReq = 8;
    case kTieReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.tiereq_);
      break;
    }
    // .GoBang.TieResponse tieResp = 14;
    case kTieResp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.tieresp_);
      break;
    }
    // .GoBang.SurrenderRequest surrenderReq = 9;
    case kSurrenderReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.surrenderreq_);
      break;
    }
    // .GoBang.Messg messg = 10;
    case kMessg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.messg_);
      break;
    }
    // .GoBang.ContinueGameRequest continueGameReq = 11;
    case kContinueGameReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.continuegamereq_);
      break;
    }
    // .GoBang.QuitRoomRequest quitRoomReq = 12;
    case kQuitRoomReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.quitroomreq_);
      break;
    }
    // .GoBang.NormalMatchRequest normalMatchReq = 13;
    case kNormalMatchReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.normalmatchreq_);
      break;
    }
    // .GoBang.RankMatchRequest rankMatchReq = 16;
    case kRankMatchReq: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.rankmatchreq_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData goBangRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    goBangRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*goBangRequest::GetClassData() const { return &_class_data_; }


void goBangRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<goBangRequest*>(&to_msg);
  auto& from = static_cast<const goBangRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.goBangRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  switch (from.request_case()) {
    case kLoginReq: {
      _this->_internal_mutable_loginreq()->::GoBang::LoginRequest::MergeFrom(
          from._internal_loginreq());
      break;
    }
    case kRegisterReq: {
      _this->_internal_mutable_registerreq()->::GoBang::RegisterRequest::MergeFrom(
          from._internal_registerreq());
      break;
    }
    case kRankListReq: {
      _this->_internal_mutable_ranklistreq()->::GoBang::RankListRequest::MergeFrom(
          from._internal_ranklistreq());
      break;
    }
    case kCreateRoomReq: {
      _this->_internal_mutable_createroomreq()->::GoBang::CreateRoomRequest::MergeFrom(
          from._internal_createroomreq());
      break;
    }
    case kSetPieceReq: {
      _this->_internal_mutable_setpiecereq()->::GoBang::SetPieceRequest::MergeFrom(
          from._internal_setpiecereq());
      break;
    }
    case kUndoReq: {
      _this->_internal_mutable_undoreq()->::GoBang::UndoRequest::MergeFrom(
          from._internal_undoreq());
      break;
    }
    case kUndoResp: {
      _this->_internal_mutable_undoresp()->::GoBang::UndoResponse::MergeFrom(
          from._internal_undoresp());
      break;
    }
    case kTieReq: {
      _this->_internal_mutable_tiereq()->::GoBang::TieRequest::MergeFrom(
          from._internal_tiereq());
      break;
    }
    case kTieResp: {
      _this->_internal_mutable_tieresp()->::GoBang::TieResponse::MergeFrom(
          from._internal_tieresp());
      break;
    }
    case kSurrenderReq: {
      _this->_internal_mutable_surrenderreq()->::GoBang::SurrenderRequest::MergeFrom(
          from._internal_surrenderreq());
      break;
    }
    case kMessg: {
      _this->_internal_mutable_messg()->::GoBang::Messg::MergeFrom(
          from._internal_messg());
      break;
    }
    case kContinueGameReq: {
      _this->_internal_mutable_continuegamereq()->::GoBang::ContinueGameRequest::MergeFrom(
          from._internal_continuegamereq());
      break;
    }
    case kQuitRoomReq: {
      _this->_internal_mutable_quitroomreq()->::GoBang::QuitRoomRequest::MergeFrom(
          from._internal_quitroomreq());
      break;
    }
    case kNormalMatchReq: {
      _this->_internal_mutable_normalmatchreq()->::GoBang::NormalMatchRequest::MergeFrom(
          from._internal_normalmatchreq());
      break;
    }
    case kRankMatchReq: {
      _this->_internal_mutable_rankmatchreq()->::GoBang::RankMatchRequest::MergeFrom(
          from._internal_rankmatchreq());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void goBangRequest::CopyFrom(const goBangRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.goBangRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool goBangRequest::IsInitialized() const {
  return true;
}

void goBangRequest::InternalSwap(goBangRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_.request_, other->_impl_.request_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata goBangRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[31]);
}

// ===================================================================

class goBangResponse::_Internal {
 public:
  static const ::GoBang::LoginResponse& loginresp(const goBangResponse* msg);
  static const ::GoBang::RegisterResponse& registerresp(const goBangResponse* msg);
  static const ::GoBang::RankListResponse& ranklistresp(const goBangResponse* msg);
  static const ::GoBang::CreateRoomResponse& createroomresp(const goBangResponse* msg);
  static const ::GoBang::SetPieceResponse& setpieceresp(const goBangResponse* msg);
  static const ::GoBang::UndoResponse& undoresponse(const goBangResponse* msg);
  static const ::GoBang::TieResponse& tieresp(const goBangResponse* msg);
  static const ::GoBang::UndoRequest& undoreq(const goBangResponse* msg);
  static const ::GoBang::UndoResponse& undoresp(const goBangResponse* msg);
  static const ::GoBang::Messg& messg(const goBangResponse* msg);
  static const ::GoBang::ContinueGameResponse& continuegameresp(const goBangResponse* msg);
  static const ::GoBang::QuitRoomResponse& quitroomresp(const goBangResponse* msg);
  static const ::GoBang::GameStart& gamestart(const goBangResponse* msg);
  static const ::GoBang::GameOver& gameover(const goBangResponse* msg);
  static const ::GoBang::NormalMatchResponse& normalmatchresp(const goBangResponse* msg);
  static const ::GoBang::RankMatchResponse& rankmatchresp(const goBangResponse* msg);
};

const ::GoBang::LoginResponse&
goBangResponse::_Internal::loginresp(const goBangResponse* msg) {
  return *msg->_impl_.response_.loginresp_;
}
const ::GoBang::RegisterResponse&
goBangResponse::_Internal::registerresp(const goBangResponse* msg) {
  return *msg->_impl_.response_.registerresp_;
}
const ::GoBang::RankListResponse&
goBangResponse::_Internal::ranklistresp(const goBangResponse* msg) {
  return *msg->_impl_.response_.ranklistresp_;
}
const ::GoBang::CreateRoomResponse&
goBangResponse::_Internal::createroomresp(const goBangResponse* msg) {
  return *msg->_impl_.response_.createroomresp_;
}
const ::GoBang::SetPieceResponse&
goBangResponse::_Internal::setpieceresp(const goBangResponse* msg) {
  return *msg->_impl_.response_.setpieceresp_;
}
const ::GoBang::UndoResponse&
goBangResponse::_Internal::undoresponse(const goBangResponse* msg) {
  return *msg->_impl_.response_.undoresponse_;
}
const ::GoBang::TieResponse&
goBangResponse::_Internal::tieresp(const goBangResponse* msg) {
  return *msg->_impl_.response_.tieresp_;
}
const ::GoBang::UndoRequest&
goBangResponse::_Internal::undoreq(const goBangResponse* msg) {
  return *msg->_impl_.response_.undoreq_;
}
const ::GoBang::UndoResponse&
goBangResponse::_Internal::undoresp(const goBangResponse* msg) {
  return *msg->_impl_.response_.undoresp_;
}
const ::GoBang::Messg&
goBangResponse::_Internal::messg(const goBangResponse* msg) {
  return *msg->_impl_.response_.messg_;
}
const ::GoBang::ContinueGameResponse&
goBangResponse::_Internal::continuegameresp(const goBangResponse* msg) {
  return *msg->_impl_.response_.continuegameresp_;
}
const ::GoBang::QuitRoomResponse&
goBangResponse::_Internal::quitroomresp(const goBangResponse* msg) {
  return *msg->_impl_.response_.quitroomresp_;
}
const ::GoBang::GameStart&
goBangResponse::_Internal::gamestart(const goBangResponse* msg) {
  return *msg->_impl_.response_.gamestart_;
}
const ::GoBang::GameOver&
goBangResponse::_Internal::gameover(const goBangResponse* msg) {
  return *msg->_impl_.response_.gameover_;
}
const ::GoBang::NormalMatchResponse&
goBangResponse::_Internal::normalmatchresp(const goBangResponse* msg) {
  return *msg->_impl_.response_.normalmatchresp_;
}
const ::GoBang::RankMatchResponse&
goBangResponse::_Internal::rankmatchresp(const goBangResponse* msg) {
  return *msg->_impl_.response_.rankmatchresp_;
}
void goBangResponse::set_allocated_loginresp(::GoBang::LoginResponse* loginresp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (loginresp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(loginresp);
    if (message_arena != submessage_arena) {
      loginresp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loginresp, submessage_arena);
    }
    set_has_loginresp();
    _impl_.response_.loginresp_ = loginresp;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangResponse.loginResp)
}
void goBangResponse::set_allocated_registerresp(::GoBang::RegisterResponse* registerresp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (registerresp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(registerresp);
    if (message_arena != submessage_arena) {
      registerresp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, registerresp, submessage_arena);
    }
    set_has_registerresp();
    _impl_.response_.registerresp_ = registerresp;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangResponse.registerResp)
}
void goBangResponse::set_allocated_ranklistresp(::GoBang::RankListResponse* ranklistresp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (ranklistresp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ranklistresp);
    if (message_arena != submessage_arena) {
      ranklistresp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ranklistresp, submessage_arena);
    }
    set_has_ranklistresp();
    _impl_.response_.ranklistresp_ = ranklistresp;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangResponse.rankListResp)
}
void goBangResponse::set_allocated_createroomresp(::GoBang::CreateRoomResponse* createroomresp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (createroomresp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(createroomresp);
    if (message_arena != submessage_arena) {
      createroomresp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, createroomresp, submessage_arena);
    }
    set_has_createroomresp();
    _impl_.response_.createroomresp_ = createroomresp;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangResponse.createRoomResp)
}
void goBangResponse::set_allocated_setpieceresp(::GoBang::SetPieceResponse* setpieceresp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (setpieceresp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(setpieceresp);
    if (message_arena != submessage_arena) {
      setpieceresp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setpieceresp, submessage_arena);
    }
    set_has_setpieceresp();
    _impl_.response_.setpieceresp_ = setpieceresp;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangResponse.setPieceResp)
}
void goBangResponse::set_allocated_undoresponse(::GoBang::UndoResponse* undoresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (undoresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(undoresponse);
    if (message_arena != submessage_arena) {
      undoresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undoresponse, submessage_arena);
    }
    set_has_undoresponse();
    _impl_.response_.undoresponse_ = undoresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangResponse.undoResponse)
}
void goBangResponse::set_allocated_tieresp(::GoBang::TieResponse* tieresp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (tieresp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tieresp);
    if (message_arena != submessage_arena) {
      tieresp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tieresp, submessage_arena);
    }
    set_has_tieresp();
    _impl_.response_.tieresp_ = tieresp;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangResponse.tieResp)
}
void goBangResponse::set_allocated_undoreq(::GoBang::UndoRequest* undoreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (undoreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(undoreq);
    if (message_arena != submessage_arena) {
      undoreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undoreq, submessage_arena);
    }
    set_has_undoreq();
    _impl_.response_.undoreq_ = undoreq;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangResponse.undoReq)
}
void goBangResponse::set_allocated_undoresp(::GoBang::UndoResponse* undoresp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (undoresp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(undoresp);
    if (message_arena != submessage_arena) {
      undoresp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, undoresp, submessage_arena);
    }
    set_has_undoresp();
    _impl_.response_.undoresp_ = undoresp;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangResponse.undoResp)
}
void goBangResponse::set_allocated_messg(::GoBang::Messg* messg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (messg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(messg);
    if (message_arena != submessage_arena) {
      messg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messg, submessage_arena);
    }
    set_has_messg();
    _impl_.response_.messg_ = messg;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangResponse.messg)
}
void goBangResponse::set_allocated_continuegameresp(::GoBang::ContinueGameResponse* continuegameresp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (continuegameresp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(continuegameresp);
    if (message_arena != submessage_arena) {
      continuegameresp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, continuegameresp, submessage_arena);
    }
    set_has_continuegameresp();
    _impl_.response_.continuegameresp_ = continuegameresp;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangResponse.continueGameResp)
}
void goBangResponse::set_allocated_quitroomresp(::GoBang::QuitRoomResponse* quitroomresp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (quitroomresp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(quitroomresp);
    if (message_arena != submessage_arena) {
      quitroomresp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quitroomresp, submessage_arena);
    }
    set_has_quitroomresp();
    _impl_.response_.quitroomresp_ = quitroomresp;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangResponse.quitRoomResp)
}
void goBangResponse::set_allocated_gamestart(::GoBang::GameStart* gamestart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (gamestart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gamestart);
    if (message_arena != submessage_arena) {
      gamestart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gamestart, submessage_arena);
    }
    set_has_gamestart();
    _impl_.response_.gamestart_ = gamestart;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangResponse.gameStart)
}
void goBangResponse::set_allocated_gameover(::GoBang::GameOver* gameover) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (gameover) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gameover);
    if (message_arena != submessage_arena) {
      gameover = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gameover, submessage_arena);
    }
    set_has_gameover();
    _impl_.response_.gameover_ = gameover;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangResponse.gameOver)
}
void goBangResponse::set_allocated_normalmatchresp(::GoBang::NormalMatchResponse* normalmatchresp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (normalmatchresp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(normalmatchresp);
    if (message_arena != submessage_arena) {
      normalmatchresp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normalmatchresp, submessage_arena);
    }
    set_has_normalmatchresp();
    _impl_.response_.normalmatchresp_ = normalmatchresp;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangResponse.normalMatchResp)
}
void goBangResponse::set_allocated_rankmatchresp(::GoBang::RankMatchResponse* rankmatchresp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (rankmatchresp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rankmatchresp);
    if (message_arena != submessage_arena) {
      rankmatchresp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rankmatchresp, submessage_arena);
    }
    set_has_rankmatchresp();
    _impl_.response_.rankmatchresp_ = rankmatchresp;
  }
  // @@protoc_insertion_point(field_set_allocated:GoBang.goBangResponse.rankMatchResp)
}
goBangResponse::goBangResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GoBang.goBangResponse)
}
goBangResponse::goBangResponse(const goBangResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  goBangResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  clear_has_response();
  switch (from.response_case()) {
    case kLoginResp: {
      _this->_internal_mutable_loginresp()->::GoBang::LoginResponse::MergeFrom(
          from._internal_loginresp());
      break;
    }
    case kRegisterResp: {
      _this->_internal_mutable_registerresp()->::GoBang::RegisterResponse::MergeFrom(
          from._internal_registerresp());
      break;
    }
    case kRankListResp: {
      _this->_internal_mutable_ranklistresp()->::GoBang::RankListResponse::MergeFrom(
          from._internal_ranklistresp());
      break;
    }
    case kCreateRoomResp: {
      _this->_internal_mutable_createroomresp()->::GoBang::CreateRoomResponse::MergeFrom(
          from._internal_createroomresp());
      break;
    }
    case kSetPieceResp: {
      _this->_internal_mutable_setpieceresp()->::GoBang::SetPieceResponse::MergeFrom(
          from._internal_setpieceresp());
      break;
    }
    case kUndoResponse: {
      _this->_internal_mutable_undoresponse()->::GoBang::UndoResponse::MergeFrom(
          from._internal_undoresponse());
      break;
    }
    case kTieResp: {
      _this->_internal_mutable_tieresp()->::GoBang::TieResponse::MergeFrom(
          from._internal_tieresp());
      break;
    }
    case kUndoReq: {
      _this->_internal_mutable_undoreq()->::GoBang::UndoRequest::MergeFrom(
          from._internal_undoreq());
      break;
    }
    case kUndoResp: {
      _this->_internal_mutable_undoresp()->::GoBang::UndoResponse::MergeFrom(
          from._internal_undoresp());
      break;
    }
    case kMessg: {
      _this->_internal_mutable_messg()->::GoBang::Messg::MergeFrom(
          from._internal_messg());
      break;
    }
    case kContinueGameResp: {
      _this->_internal_mutable_continuegameresp()->::GoBang::ContinueGameResponse::MergeFrom(
          from._internal_continuegameresp());
      break;
    }
    case kQuitRoomResp: {
      _this->_internal_mutable_quitroomresp()->::GoBang::QuitRoomResponse::MergeFrom(
          from._internal_quitroomresp());
      break;
    }
    case kGameStart: {
      _this->_internal_mutable_gamestart()->::GoBang::GameStart::MergeFrom(
          from._internal_gamestart());
      break;
    }
    case kGameOver: {
      _this->_internal_mutable_gameover()->::GoBang::GameOver::MergeFrom(
          from._internal_gameover());
      break;
    }
    case kNormalMatchResp: {
      _this->_internal_mutable_normalmatchresp()->::GoBang::NormalMatchResponse::MergeFrom(
          from._internal_normalmatchresp());
      break;
    }
    case kRankMatchResp: {
      _this->_internal_mutable_rankmatchresp()->::GoBang::RankMatchResponse::MergeFrom(
          from._internal_rankmatchresp());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:GoBang.goBangResponse)
}

inline void goBangResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_response();
}

goBangResponse::~goBangResponse() {
  // @@protoc_insertion_point(destructor:GoBang.goBangResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void goBangResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void goBangResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void goBangResponse::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:GoBang.goBangResponse)
  switch (response_case()) {
    case kLoginResp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.loginresp_;
      }
      break;
    }
    case kRegisterResp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.registerresp_;
      }
      break;
    }
    case kRankListResp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.ranklistresp_;
      }
      break;
    }
    case kCreateRoomResp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.createroomresp_;
      }
      break;
    }
    case kSetPieceResp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.setpieceresp_;
      }
      break;
    }
    case kUndoResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.undoresponse_;
      }
      break;
    }
    case kTieResp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.tieresp_;
      }
      break;
    }
    case kUndoReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.undoreq_;
      }
      break;
    }
    case kUndoResp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.undoresp_;
      }
      break;
    }
    case kMessg: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.messg_;
      }
      break;
    }
    case kContinueGameResp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.continuegameresp_;
      }
      break;
    }
    case kQuitRoomResp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.quitroomresp_;
      }
      break;
    }
    case kGameStart: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.gamestart_;
      }
      break;
    }
    case kGameOver: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.gameover_;
      }
      break;
    }
    case kNormalMatchResp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.normalmatchresp_;
      }
      break;
    }
    case kRankMatchResp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.rankmatchresp_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}


void goBangResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GoBang.goBangResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_ = 0;
  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* goBangResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .GoBang.TYPE type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::GoBang::TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .GoBang.LoginResponse loginResp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_loginresp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.RegisterResponse registerResp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_registerresp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.RankListResponse rankListResp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ranklistresp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.CreateRoomResponse createRoomResp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_createroomresp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.SetPieceResponse setPieceResp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_setpieceresp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.UndoResponse undoResponse = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_undoresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.TieResponse tieResp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tieresp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.Messg messg = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_messg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.ContinueGameResponse continueGameResp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_continuegameresp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.QuitRoomResponse quitRoomResp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_quitroomresp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.GameStart gameStart = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamestart(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.GameOver gameOver = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameover(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.NormalMatchResponse normalMatchResp = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_normalmatchresp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.RankMatchResponse rankMatchResp = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_rankmatchresp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.UndoRequest undoReq = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_undoreq(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GoBang.UndoResponse undoResp = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_undoresp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* goBangResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoBang.goBangResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .GoBang.TYPE type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .GoBang.LoginResponse loginResp = 2;
  if (_internal_has_loginresp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::loginresp(this),
        _Internal::loginresp(this).GetCachedSize(), target, stream);
  }

  // .GoBang.RegisterResponse registerResp = 3;
  if (_internal_has_registerresp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::registerresp(this),
        _Internal::registerresp(this).GetCachedSize(), target, stream);
  }

  // .GoBang.RankListResponse rankListResp = 4;
  if (_internal_has_ranklistresp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::ranklistresp(this),
        _Internal::ranklistresp(this).GetCachedSize(), target, stream);
  }

  // .GoBang.CreateRoomResponse createRoomResp = 5;
  if (_internal_has_createroomresp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::createroomresp(this),
        _Internal::createroomresp(this).GetCachedSize(), target, stream);
  }

  // .GoBang.SetPieceResponse setPieceResp = 6;
  if (_internal_has_setpieceresp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::setpieceresp(this),
        _Internal::setpieceresp(this).GetCachedSize(), target, stream);
  }

  // .GoBang.UndoResponse undoResponse = 7;
  if (_internal_has_undoresponse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::undoresponse(this),
        _Internal::undoresponse(this).GetCachedSize(), target, stream);
  }

  // .GoBang.TieResponse tieResp = 8;
  if (_internal_has_tieresp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::tieresp(this),
        _Internal::tieresp(this).GetCachedSize(), target, stream);
  }

  // .GoBang.Messg messg = 10;
  if (_internal_has_messg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::messg(this),
        _Internal::messg(this).GetCachedSize(), target, stream);
  }

  // .GoBang.ContinueGameResponse continueGameResp = 11;
  if (_internal_has_continuegameresp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::continuegameresp(this),
        _Internal::continuegameresp(this).GetCachedSize(), target, stream);
  }

  // .GoBang.QuitRoomResponse quitRoomResp = 12;
  if (_internal_has_quitroomresp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::quitroomresp(this),
        _Internal::quitroomresp(this).GetCachedSize(), target, stream);
  }

  // .GoBang.GameStart gameStart = 13;
  if (_internal_has_gamestart()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::gamestart(this),
        _Internal::gamestart(this).GetCachedSize(), target, stream);
  }

  // .GoBang.GameOver gameOver = 14;
  if (_internal_has_gameover()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::gameover(this),
        _Internal::gameover(this).GetCachedSize(), target, stream);
  }

  // .GoBang.NormalMatchResponse normalMatchResp = 15;
  if (_internal_has_normalmatchresp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::normalmatchresp(this),
        _Internal::normalmatchresp(this).GetCachedSize(), target, stream);
  }

  // .GoBang.RankMatchResponse rankMatchResp = 16;
  if (_internal_has_rankmatchresp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::rankmatchresp(this),
        _Internal::rankmatchresp(this).GetCachedSize(), target, stream);
  }

  // .GoBang.UndoRequest undoReq = 17;
  if (_internal_has_undoreq()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::undoreq(this),
        _Internal::undoreq(this).GetCachedSize(), target, stream);
  }

  // .GoBang.UndoResponse undoResp = 18;
  if (_internal_has_undoresp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::undoresp(this),
        _Internal::undoresp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoBang.goBangResponse)
  return target;
}

size_t goBangResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoBang.goBangResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GoBang.TYPE type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (response_case()) {
    // .GoBang.LoginResponse loginResp = 2;
    case kLoginResp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.loginresp_);
      break;
    }
    // .GoBang.RegisterResponse registerResp = 3;
    case kRegisterResp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.registerresp_);
      break;
    }
    // .GoBang.RankListResponse rankListResp = 4;
    case kRankListResp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.ranklistresp_);
      break;
    }
    // .GoBang.CreateRoomResponse createRoomResp = 5;
    case kCreateRoomResp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.createroomresp_);
      break;
    }
    // .GoBang.SetPieceResponse setPieceResp = 6;
    case kSetPieceResp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.setpieceresp_);
      break;
    }
    // .GoBang.UndoResponse undoResponse = 7;
    case kUndoResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.undoresponse_);
      break;
    }
    // .GoBang.TieResponse tieResp = 8;
    case kTieResp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.tieresp_);
      break;
    }
    // .GoBang.UndoRequest undoReq = 17;
    case kUndoReq: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.undoreq_);
      break;
    }
    // .GoBang.UndoResponse undoResp = 18;
    case kUndoResp: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.undoresp_);
      break;
    }
    // .GoBang.Messg messg = 10;
    case kMessg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.messg_);
      break;
    }
    // .GoBang.ContinueGameResponse continueGameResp = 11;
    case kContinueGameResp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.continuegameresp_);
      break;
    }
    // .GoBang.QuitRoomResponse quitRoomResp = 12;
    case kQuitRoomResp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.quitroomresp_);
      break;
    }
    // .GoBang.GameStart gameStart = 13;
    case kGameStart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.gamestart_);
      break;
    }
    // .GoBang.GameOver gameOver = 14;
    case kGameOver: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.gameover_);
      break;
    }
    // .GoBang.NormalMatchResponse normalMatchResp = 15;
    case kNormalMatchResp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.normalmatchresp_);
      break;
    }
    // .GoBang.RankMatchResponse rankMatchResp = 16;
    case kRankMatchResp: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.rankmatchresp_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData goBangResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    goBangResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*goBangResponse::GetClassData() const { return &_class_data_; }


void goBangResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<goBangResponse*>(&to_msg);
  auto& from = static_cast<const goBangResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GoBang.goBangResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  switch (from.response_case()) {
    case kLoginResp: {
      _this->_internal_mutable_loginresp()->::GoBang::LoginResponse::MergeFrom(
          from._internal_loginresp());
      break;
    }
    case kRegisterResp: {
      _this->_internal_mutable_registerresp()->::GoBang::RegisterResponse::MergeFrom(
          from._internal_registerresp());
      break;
    }
    case kRankListResp: {
      _this->_internal_mutable_ranklistresp()->::GoBang::RankListResponse::MergeFrom(
          from._internal_ranklistresp());
      break;
    }
    case kCreateRoomResp: {
      _this->_internal_mutable_createroomresp()->::GoBang::CreateRoomResponse::MergeFrom(
          from._internal_createroomresp());
      break;
    }
    case kSetPieceResp: {
      _this->_internal_mutable_setpieceresp()->::GoBang::SetPieceResponse::MergeFrom(
          from._internal_setpieceresp());
      break;
    }
    case kUndoResponse: {
      _this->_internal_mutable_undoresponse()->::GoBang::UndoResponse::MergeFrom(
          from._internal_undoresponse());
      break;
    }
    case kTieResp: {
      _this->_internal_mutable_tieresp()->::GoBang::TieResponse::MergeFrom(
          from._internal_tieresp());
      break;
    }
    case kUndoReq: {
      _this->_internal_mutable_undoreq()->::GoBang::UndoRequest::MergeFrom(
          from._internal_undoreq());
      break;
    }
    case kUndoResp: {
      _this->_internal_mutable_undoresp()->::GoBang::UndoResponse::MergeFrom(
          from._internal_undoresp());
      break;
    }
    case kMessg: {
      _this->_internal_mutable_messg()->::GoBang::Messg::MergeFrom(
          from._internal_messg());
      break;
    }
    case kContinueGameResp: {
      _this->_internal_mutable_continuegameresp()->::GoBang::ContinueGameResponse::MergeFrom(
          from._internal_continuegameresp());
      break;
    }
    case kQuitRoomResp: {
      _this->_internal_mutable_quitroomresp()->::GoBang::QuitRoomResponse::MergeFrom(
          from._internal_quitroomresp());
      break;
    }
    case kGameStart: {
      _this->_internal_mutable_gamestart()->::GoBang::GameStart::MergeFrom(
          from._internal_gamestart());
      break;
    }
    case kGameOver: {
      _this->_internal_mutable_gameover()->::GoBang::GameOver::MergeFrom(
          from._internal_gameover());
      break;
    }
    case kNormalMatchResp: {
      _this->_internal_mutable_normalmatchresp()->::GoBang::NormalMatchResponse::MergeFrom(
          from._internal_normalmatchresp());
      break;
    }
    case kRankMatchResp: {
      _this->_internal_mutable_rankmatchresp()->::GoBang::RankMatchResponse::MergeFrom(
          from._internal_rankmatchresp());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void goBangResponse::CopyFrom(const goBangResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoBang.goBangResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool goBangResponse::IsInitialized() const {
  return true;
}

void goBangResponse::InternalSwap(goBangResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_.response_, other->_impl_.response_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata goBangResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_myprotocol_2eproto_getter, &descriptor_table_myprotocol_2eproto_once,
      file_level_metadata_myprotocol_2eproto[32]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace GoBang
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GoBang::LoginRequest*
Arena::CreateMaybeMessage< ::GoBang::LoginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::LoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::LoginResponse*
Arena::CreateMaybeMessage< ::GoBang::LoginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::LoginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::RegisterRequest*
Arena::CreateMaybeMessage< ::GoBang::RegisterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::RegisterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::RegisterResponse*
Arena::CreateMaybeMessage< ::GoBang::RegisterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::RegisterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::RankListRequest*
Arena::CreateMaybeMessage< ::GoBang::RankListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::RankListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::Player*
Arena::CreateMaybeMessage< ::GoBang::Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::Player >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::RankListResponse*
Arena::CreateMaybeMessage< ::GoBang::RankListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::RankListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::NormalMatchRequest*
Arena::CreateMaybeMessage< ::GoBang::NormalMatchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::NormalMatchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::NormalMatchResponse*
Arena::CreateMaybeMessage< ::GoBang::NormalMatchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::NormalMatchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::RankMatchRequest*
Arena::CreateMaybeMessage< ::GoBang::RankMatchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::RankMatchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::RankMatchResponse*
Arena::CreateMaybeMessage< ::GoBang::RankMatchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::RankMatchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::CreateRoomRequest*
Arena::CreateMaybeMessage< ::GoBang::CreateRoomRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::CreateRoomRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::CreateRoomResponse*
Arena::CreateMaybeMessage< ::GoBang::CreateRoomResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::CreateRoomResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::JoinRoomRequest*
Arena::CreateMaybeMessage< ::GoBang::JoinRoomRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::JoinRoomRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::JoinRoomResponse*
Arena::CreateMaybeMessage< ::GoBang::JoinRoomResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::JoinRoomResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::Piece*
Arena::CreateMaybeMessage< ::GoBang::Piece >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::Piece >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::Border*
Arena::CreateMaybeMessage< ::GoBang::Border >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::Border >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::SetPieceRequest*
Arena::CreateMaybeMessage< ::GoBang::SetPieceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::SetPieceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::SetPieceResponse*
Arena::CreateMaybeMessage< ::GoBang::SetPieceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::SetPieceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::UndoRequest*
Arena::CreateMaybeMessage< ::GoBang::UndoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::UndoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::UndoResponse*
Arena::CreateMaybeMessage< ::GoBang::UndoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::UndoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::TieRequest*
Arena::CreateMaybeMessage< ::GoBang::TieRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::TieRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::TieResponse*
Arena::CreateMaybeMessage< ::GoBang::TieResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::TieResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::SurrenderRequest*
Arena::CreateMaybeMessage< ::GoBang::SurrenderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::SurrenderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::Messg*
Arena::CreateMaybeMessage< ::GoBang::Messg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::Messg >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::ContinueGameRequest*
Arena::CreateMaybeMessage< ::GoBang::ContinueGameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::ContinueGameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::ContinueGameResponse*
Arena::CreateMaybeMessage< ::GoBang::ContinueGameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::ContinueGameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::QuitRoomRequest*
Arena::CreateMaybeMessage< ::GoBang::QuitRoomRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::QuitRoomRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::QuitRoomResponse*
Arena::CreateMaybeMessage< ::GoBang::QuitRoomResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::QuitRoomResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::GameStart*
Arena::CreateMaybeMessage< ::GoBang::GameStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::GameStart >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::GameOver*
Arena::CreateMaybeMessage< ::GoBang::GameOver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::GameOver >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::goBangRequest*
Arena::CreateMaybeMessage< ::GoBang::goBangRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::goBangRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GoBang::goBangResponse*
Arena::CreateMaybeMessage< ::GoBang::goBangResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GoBang::goBangResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
